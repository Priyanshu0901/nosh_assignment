
assignment_1_test_g031kb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d30  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001dec  08001dec  00002dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e2c  08001e2c  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001e2c  08001e2c  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e2c  08001e2c  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e2c  08001e2c  00002e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001e30  08001e30  00002e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001e34  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  08001e40  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08001e40  0000307c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a86  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a5c  00000000  00000000  0000caba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  0000e518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000893  00000000  00000000  0000f038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015197  00000000  00000000  0000f8cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be67  00000000  00000000  00024a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000899a3  00000000  00000000  000308c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ba26c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002794  00000000  00000000  000ba2b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000bca44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001dd4 	.word	0x08001dd4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08001dd4 	.word	0x08001dd4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fa60 	bl	80006e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f807 	bl	8000236 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f878 	bl	800031c <MX_GPIO_Init>
  MX_TIM17_Init();
 800022c:	f000 f84c 	bl	80002c8 <MX_TIM17_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		low_power_mode();
 8000230:	f000 f99a 	bl	8000568 <low_power_mode>
 8000234:	e7fc      	b.n	8000230 <main+0x14>

08000236 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000236:	b590      	push	{r4, r7, lr}
 8000238:	b093      	sub	sp, #76	@ 0x4c
 800023a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023c:	2410      	movs	r4, #16
 800023e:	193b      	adds	r3, r7, r4
 8000240:	0018      	movs	r0, r3
 8000242:	2338      	movs	r3, #56	@ 0x38
 8000244:	001a      	movs	r2, r3
 8000246:	2100      	movs	r1, #0
 8000248:	f001 fd98 	bl	8001d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	003b      	movs	r3, r7
 800024e:	0018      	movs	r0, r3
 8000250:	2310      	movs	r3, #16
 8000252:	001a      	movs	r2, r3
 8000254:	2100      	movs	r1, #0
 8000256:	f001 fd91 	bl	8001d7c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800025a:	2380      	movs	r3, #128	@ 0x80
 800025c:	009b      	lsls	r3, r3, #2
 800025e:	0018      	movs	r0, r3
 8000260:	f000 fdc6 	bl	8000df0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000264:	193b      	adds	r3, r7, r4
 8000266:	2202      	movs	r2, #2
 8000268:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026a:	193b      	adds	r3, r7, r4
 800026c:	2280      	movs	r2, #128	@ 0x80
 800026e:	0052      	lsls	r2, r2, #1
 8000270:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000272:	193b      	adds	r3, r7, r4
 8000274:	2200      	movs	r2, #0
 8000276:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000278:	193b      	adds	r3, r7, r4
 800027a:	2240      	movs	r2, #64	@ 0x40
 800027c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800027e:	193b      	adds	r3, r7, r4
 8000280:	2200      	movs	r2, #0
 8000282:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000284:	193b      	adds	r3, r7, r4
 8000286:	0018      	movs	r0, r3
 8000288:	f000 fe36 	bl	8000ef8 <HAL_RCC_OscConfig>
 800028c:	1e03      	subs	r3, r0, #0
 800028e:	d001      	beq.n	8000294 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000290:	f000 f977 	bl	8000582 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000294:	003b      	movs	r3, r7
 8000296:	2207      	movs	r2, #7
 8000298:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800029a:	003b      	movs	r3, r7
 800029c:	2200      	movs	r2, #0
 800029e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a0:	003b      	movs	r3, r7
 80002a2:	2200      	movs	r2, #0
 80002a4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a6:	003b      	movs	r3, r7
 80002a8:	2200      	movs	r2, #0
 80002aa:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ac:	003b      	movs	r3, r7
 80002ae:	2100      	movs	r1, #0
 80002b0:	0018      	movs	r0, r3
 80002b2:	f001 f93b 	bl	800152c <HAL_RCC_ClockConfig>
 80002b6:	1e03      	subs	r3, r0, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x88>
  {
    Error_Handler();
 80002ba:	f000 f962 	bl	8000582 <Error_Handler>
  }
}
 80002be:	46c0      	nop			@ (mov r8, r8)
 80002c0:	46bd      	mov	sp, r7
 80002c2:	b013      	add	sp, #76	@ 0x4c
 80002c4:	bd90      	pop	{r4, r7, pc}
	...

080002c8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80002cc:	4b0f      	ldr	r3, [pc, #60]	@ (800030c <MX_TIM17_Init+0x44>)
 80002ce:	4a10      	ldr	r2, [pc, #64]	@ (8000310 <MX_TIM17_Init+0x48>)
 80002d0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 16000 -1;
 80002d2:	4b0e      	ldr	r3, [pc, #56]	@ (800030c <MX_TIM17_Init+0x44>)
 80002d4:	4a0f      	ldr	r2, [pc, #60]	@ (8000314 <MX_TIM17_Init+0x4c>)
 80002d6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002d8:	4b0c      	ldr	r3, [pc, #48]	@ (800030c <MX_TIM17_Init+0x44>)
 80002da:	2200      	movs	r2, #0
 80002dc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000 - 1;
 80002de:	4b0b      	ldr	r3, [pc, #44]	@ (800030c <MX_TIM17_Init+0x44>)
 80002e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000318 <MX_TIM17_Init+0x50>)
 80002e2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002e4:	4b09      	ldr	r3, [pc, #36]	@ (800030c <MX_TIM17_Init+0x44>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80002ea:	4b08      	ldr	r3, [pc, #32]	@ (800030c <MX_TIM17_Init+0x44>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002f0:	4b06      	ldr	r3, [pc, #24]	@ (800030c <MX_TIM17_Init+0x44>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80002f6:	4b05      	ldr	r3, [pc, #20]	@ (800030c <MX_TIM17_Init+0x44>)
 80002f8:	0018      	movs	r0, r3
 80002fa:	f001 faa1 	bl	8001840 <HAL_TIM_Base_Init>
 80002fe:	1e03      	subs	r3, r0, #0
 8000300:	d001      	beq.n	8000306 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8000302:	f000 f93e 	bl	8000582 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000306:	46c0      	nop			@ (mov r8, r8)
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000028 	.word	0x20000028
 8000310:	40014800 	.word	0x40014800
 8000314:	00003e7f 	.word	0x00003e7f
 8000318:	000003e7 	.word	0x000003e7

0800031c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800031c:	b590      	push	{r4, r7, lr}
 800031e:	b089      	sub	sp, #36	@ 0x24
 8000320:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000322:	240c      	movs	r4, #12
 8000324:	193b      	adds	r3, r7, r4
 8000326:	0018      	movs	r0, r3
 8000328:	2314      	movs	r3, #20
 800032a:	001a      	movs	r2, r3
 800032c:	2100      	movs	r1, #0
 800032e:	f001 fd25 	bl	8001d7c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000332:	4b42      	ldr	r3, [pc, #264]	@ (800043c <MX_GPIO_Init+0x120>)
 8000334:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000336:	4b41      	ldr	r3, [pc, #260]	@ (800043c <MX_GPIO_Init+0x120>)
 8000338:	2104      	movs	r1, #4
 800033a:	430a      	orrs	r2, r1
 800033c:	635a      	str	r2, [r3, #52]	@ 0x34
 800033e:	4b3f      	ldr	r3, [pc, #252]	@ (800043c <MX_GPIO_Init+0x120>)
 8000340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000342:	2204      	movs	r2, #4
 8000344:	4013      	ands	r3, r2
 8000346:	60bb      	str	r3, [r7, #8]
 8000348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800034a:	4b3c      	ldr	r3, [pc, #240]	@ (800043c <MX_GPIO_Init+0x120>)
 800034c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800034e:	4b3b      	ldr	r3, [pc, #236]	@ (800043c <MX_GPIO_Init+0x120>)
 8000350:	2120      	movs	r1, #32
 8000352:	430a      	orrs	r2, r1
 8000354:	635a      	str	r2, [r3, #52]	@ 0x34
 8000356:	4b39      	ldr	r3, [pc, #228]	@ (800043c <MX_GPIO_Init+0x120>)
 8000358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800035a:	2220      	movs	r2, #32
 800035c:	4013      	ands	r3, r2
 800035e:	607b      	str	r3, [r7, #4]
 8000360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000362:	4b36      	ldr	r3, [pc, #216]	@ (800043c <MX_GPIO_Init+0x120>)
 8000364:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000366:	4b35      	ldr	r3, [pc, #212]	@ (800043c <MX_GPIO_Init+0x120>)
 8000368:	2101      	movs	r1, #1
 800036a:	430a      	orrs	r2, r1
 800036c:	635a      	str	r2, [r3, #52]	@ 0x34
 800036e:	4b33      	ldr	r3, [pc, #204]	@ (800043c <MX_GPIO_Init+0x120>)
 8000370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000372:	2201      	movs	r2, #1
 8000374:	4013      	ands	r3, r2
 8000376:	603b      	str	r3, [r7, #0]
 8000378:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 800037a:	23a0      	movs	r3, #160	@ 0xa0
 800037c:	05db      	lsls	r3, r3, #23
 800037e:	2200      	movs	r2, #0
 8000380:	2101      	movs	r1, #1
 8000382:	0018      	movs	r0, r3
 8000384:	f000 fc92 	bl	8000cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000388:	4b2d      	ldr	r3, [pc, #180]	@ (8000440 <MX_GPIO_Init+0x124>)
 800038a:	2200      	movs	r2, #0
 800038c:	2140      	movs	r1, #64	@ 0x40
 800038e:	0018      	movs	r0, r3
 8000390:	f000 fc8c 	bl	8000cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8000394:	193b      	adds	r3, r7, r4
 8000396:	2204      	movs	r2, #4
 8000398:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800039a:	193b      	adds	r3, r7, r4
 800039c:	2288      	movs	r2, #136	@ 0x88
 800039e:	0352      	lsls	r2, r2, #13
 80003a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a2:	193b      	adds	r3, r7, r4
 80003a4:	2200      	movs	r2, #0
 80003a6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 80003a8:	193b      	adds	r3, r7, r4
 80003aa:	4a26      	ldr	r2, [pc, #152]	@ (8000444 <MX_GPIO_Init+0x128>)
 80003ac:	0019      	movs	r1, r3
 80003ae:	0010      	movs	r0, r2
 80003b0:	f000 fb18 	bl	80009e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_Pin */
  GPIO_InitStruct.Pin = TEST_Pin;
 80003b4:	193b      	adds	r3, r7, r4
 80003b6:	2201      	movs	r2, #1
 80003b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ba:	193b      	adds	r3, r7, r4
 80003bc:	2201      	movs	r2, #1
 80003be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c0:	193b      	adds	r3, r7, r4
 80003c2:	2200      	movs	r2, #0
 80003c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c6:	193b      	adds	r3, r7, r4
 80003c8:	2200      	movs	r2, #0
 80003ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 80003cc:	193a      	adds	r2, r7, r4
 80003ce:	23a0      	movs	r3, #160	@ 0xa0
 80003d0:	05db      	lsls	r3, r3, #23
 80003d2:	0011      	movs	r1, r2
 80003d4:	0018      	movs	r0, r3
 80003d6:	f000 fb05 	bl	80009e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWITCH_Pin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 80003da:	193b      	adds	r3, r7, r4
 80003dc:	2202      	movs	r2, #2
 80003de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003e0:	193b      	adds	r3, r7, r4
 80003e2:	2284      	movs	r2, #132	@ 0x84
 80003e4:	0392      	lsls	r2, r2, #14
 80003e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003e8:	193b      	adds	r3, r7, r4
 80003ea:	2201      	movs	r2, #1
 80003ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 80003ee:	193a      	adds	r2, r7, r4
 80003f0:	23a0      	movs	r3, #160	@ 0xa0
 80003f2:	05db      	lsls	r3, r3, #23
 80003f4:	0011      	movs	r1, r2
 80003f6:	0018      	movs	r0, r3
 80003f8:	f000 faf4 	bl	80009e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80003fc:	0021      	movs	r1, r4
 80003fe:	187b      	adds	r3, r7, r1
 8000400:	2240      	movs	r2, #64	@ 0x40
 8000402:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000404:	187b      	adds	r3, r7, r1
 8000406:	2201      	movs	r2, #1
 8000408:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040a:	187b      	adds	r3, r7, r1
 800040c:	2200      	movs	r2, #0
 800040e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000410:	187b      	adds	r3, r7, r1
 8000412:	2200      	movs	r2, #0
 8000414:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000416:	187b      	adds	r3, r7, r1
 8000418:	4a09      	ldr	r2, [pc, #36]	@ (8000440 <MX_GPIO_Init+0x124>)
 800041a:	0019      	movs	r1, r3
 800041c:	0010      	movs	r0, r2
 800041e:	f000 fae1 	bl	80009e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000422:	2200      	movs	r2, #0
 8000424:	2100      	movs	r1, #0
 8000426:	2005      	movs	r0, #5
 8000428:	f000 faaa 	bl	8000980 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800042c:	2005      	movs	r0, #5
 800042e:	f000 fabc 	bl	80009aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000432:	46c0      	nop			@ (mov r8, r8)
 8000434:	46bd      	mov	sp, r7
 8000436:	b009      	add	sp, #36	@ 0x24
 8000438:	bd90      	pop	{r4, r7, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	40021000 	.word	0x40021000
 8000440:	50000800 	.word	0x50000800
 8000444:	50001400 	.word	0x50001400

08000448 <Update_Timer_Period>:

/* USER CODE BEGIN 4 */
void Update_Timer_Period(uint32_t period) {
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_AUTORELOAD(&htim17, period - 1);
 8000450:	4b0a      	ldr	r3, [pc, #40]	@ (800047c <Update_Timer_Period+0x34>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	687a      	ldr	r2, [r7, #4]
 8000456:	3a01      	subs	r2, #1
 8000458:	62da      	str	r2, [r3, #44]	@ 0x2c
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	1e5a      	subs	r2, r3, #1
 800045e:	4b07      	ldr	r3, [pc, #28]	@ (800047c <Update_Timer_Period+0x34>)
 8000460:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COUNTER(&htim17, 0);
 8000462:	4b06      	ldr	r3, [pc, #24]	@ (800047c <Update_Timer_Period+0x34>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2200      	movs	r2, #0
 8000468:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start_IT(&htim17);
 800046a:	4b04      	ldr	r3, [pc, #16]	@ (800047c <Update_Timer_Period+0x34>)
 800046c:	0018      	movs	r0, r3
 800046e:	f001 fa3f 	bl	80018f0 <HAL_TIM_Base_Start_IT>
}
 8000472:	46c0      	nop			@ (mov r8, r8)
 8000474:	46bd      	mov	sp, r7
 8000476:	b002      	add	sp, #8
 8000478:	bd80      	pop	{r7, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)
 800047c:	20000028 	.word	0x20000028

08000480 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	0002      	movs	r2, r0
 8000488:	1dbb      	adds	r3, r7, #6
 800048a:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == SWITCH_Pin) {
 800048c:	1dbb      	adds	r3, r7, #6
 800048e:	881b      	ldrh	r3, [r3, #0]
 8000490:	2b02      	cmp	r3, #2
 8000492:	d140      	bne.n	8000516 <HAL_GPIO_EXTI_Falling_Callback+0x96>
		press_count = (press_count + 1) % 4;
 8000494:	4b22      	ldr	r3, [pc, #136]	@ (8000520 <HAL_GPIO_EXTI_Falling_Callback+0xa0>)
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	b2db      	uxtb	r3, r3
 800049a:	3301      	adds	r3, #1
 800049c:	4a21      	ldr	r2, [pc, #132]	@ (8000524 <HAL_GPIO_EXTI_Falling_Callback+0xa4>)
 800049e:	4013      	ands	r3, r2
 80004a0:	d504      	bpl.n	80004ac <HAL_GPIO_EXTI_Falling_Callback+0x2c>
 80004a2:	3b01      	subs	r3, #1
 80004a4:	2204      	movs	r2, #4
 80004a6:	4252      	negs	r2, r2
 80004a8:	4313      	orrs	r3, r2
 80004aa:	3301      	adds	r3, #1
 80004ac:	b2da      	uxtb	r2, r3
 80004ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000520 <HAL_GPIO_EXTI_Falling_Callback+0xa0>)
 80004b0:	701a      	strb	r2, [r3, #0]

		switch (press_count) {
 80004b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000520 <HAL_GPIO_EXTI_Falling_Callback+0xa0>)
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	2b03      	cmp	r3, #3
 80004ba:	d026      	beq.n	800050a <HAL_GPIO_EXTI_Falling_Callback+0x8a>
 80004bc:	dc2b      	bgt.n	8000516 <HAL_GPIO_EXTI_Falling_Callback+0x96>
 80004be:	2b02      	cmp	r3, #2
 80004c0:	d01d      	beq.n	80004fe <HAL_GPIO_EXTI_Falling_Callback+0x7e>
 80004c2:	dc28      	bgt.n	8000516 <HAL_GPIO_EXTI_Falling_Callback+0x96>
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d002      	beq.n	80004ce <HAL_GPIO_EXTI_Falling_Callback+0x4e>
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d012      	beq.n	80004f2 <HAL_GPIO_EXTI_Falling_Callback+0x72>
		case 3:
			Update_Timer_Period(500);
			break;
		}
	}
}
 80004cc:	e023      	b.n	8000516 <HAL_GPIO_EXTI_Falling_Callback+0x96>
			HAL_TIM_Base_Stop_IT(&htim17);
 80004ce:	4b16      	ldr	r3, [pc, #88]	@ (8000528 <HAL_GPIO_EXTI_Falling_Callback+0xa8>)
 80004d0:	0018      	movs	r0, r3
 80004d2:	f001 fa61 	bl	8001998 <HAL_TIM_Base_Stop_IT>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004d6:	4b15      	ldr	r3, [pc, #84]	@ (800052c <HAL_GPIO_EXTI_Falling_Callback+0xac>)
 80004d8:	2200      	movs	r2, #0
 80004da:	2140      	movs	r1, #64	@ 0x40
 80004dc:	0018      	movs	r0, r3
 80004de:	f000 fbe5 	bl	8000cac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 80004e2:	23a0      	movs	r3, #160	@ 0xa0
 80004e4:	05db      	lsls	r3, r3, #23
 80004e6:	2200      	movs	r2, #0
 80004e8:	2101      	movs	r1, #1
 80004ea:	0018      	movs	r0, r3
 80004ec:	f000 fbde 	bl	8000cac <HAL_GPIO_WritePin>
			break;
 80004f0:	e011      	b.n	8000516 <HAL_GPIO_EXTI_Falling_Callback+0x96>
			Update_Timer_Period(2000);
 80004f2:	23fa      	movs	r3, #250	@ 0xfa
 80004f4:	00db      	lsls	r3, r3, #3
 80004f6:	0018      	movs	r0, r3
 80004f8:	f7ff ffa6 	bl	8000448 <Update_Timer_Period>
			break;
 80004fc:	e00b      	b.n	8000516 <HAL_GPIO_EXTI_Falling_Callback+0x96>
			Update_Timer_Period(1000);
 80004fe:	23fa      	movs	r3, #250	@ 0xfa
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	0018      	movs	r0, r3
 8000504:	f7ff ffa0 	bl	8000448 <Update_Timer_Period>
			break;
 8000508:	e005      	b.n	8000516 <HAL_GPIO_EXTI_Falling_Callback+0x96>
			Update_Timer_Period(500);
 800050a:	23fa      	movs	r3, #250	@ 0xfa
 800050c:	005b      	lsls	r3, r3, #1
 800050e:	0018      	movs	r0, r3
 8000510:	f7ff ff9a 	bl	8000448 <Update_Timer_Period>
			break;
 8000514:	46c0      	nop			@ (mov r8, r8)
}
 8000516:	46c0      	nop			@ (mov r8, r8)
 8000518:	46bd      	mov	sp, r7
 800051a:	b002      	add	sp, #8
 800051c:	bd80      	pop	{r7, pc}
 800051e:	46c0      	nop			@ (mov r8, r8)
 8000520:	20000074 	.word	0x20000074
 8000524:	80000003 	.word	0x80000003
 8000528:	20000028 	.word	0x20000028
 800052c:	50000800 	.word	0x50000800

08000530 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM17) // Check if it is TIM3 interrupt
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a08      	ldr	r2, [pc, #32]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d10a      	bne.n	8000558 <HAL_TIM_PeriodElapsedCallback+0x28>
	{
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000542:	4b08      	ldr	r3, [pc, #32]	@ (8000564 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000544:	2140      	movs	r1, #64	@ 0x40
 8000546:	0018      	movs	r0, r3
 8000548:	f000 fbcd 	bl	8000ce6 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(TEST_GPIO_Port, TEST_Pin);
 800054c:	23a0      	movs	r3, #160	@ 0xa0
 800054e:	05db      	lsls	r3, r3, #23
 8000550:	2101      	movs	r1, #1
 8000552:	0018      	movs	r0, r3
 8000554:	f000 fbc7 	bl	8000ce6 <HAL_GPIO_TogglePin>
	}
}
 8000558:	46c0      	nop			@ (mov r8, r8)
 800055a:	46bd      	mov	sp, r7
 800055c:	b002      	add	sp, #8
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40014800 	.word	0x40014800
 8000564:	50000800 	.word	0x50000800

08000568 <low_power_mode>:

void low_power_mode(){
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	HAL_SuspendTick();
 800056c:	f000 f940 	bl	80007f0 <HAL_SuspendTick>
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFI);
 8000570:	2101      	movs	r1, #1
 8000572:	2000      	movs	r0, #0
 8000574:	f000 fc06 	bl	8000d84 <HAL_PWR_EnterSLEEPMode>
	HAL_ResumeTick();
 8000578:	f000 f948 	bl	800080c <HAL_ResumeTick>
}
 800057c:	46c0      	nop			@ (mov r8, r8)
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000586:	b672      	cpsid	i
}
 8000588:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800058a:	46c0      	nop			@ (mov r8, r8)
 800058c:	e7fd      	b.n	800058a <Error_Handler+0x8>
	...

08000590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000596:	4b0f      	ldr	r3, [pc, #60]	@ (80005d4 <HAL_MspInit+0x44>)
 8000598:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800059a:	4b0e      	ldr	r3, [pc, #56]	@ (80005d4 <HAL_MspInit+0x44>)
 800059c:	2101      	movs	r1, #1
 800059e:	430a      	orrs	r2, r1
 80005a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80005a2:	4b0c      	ldr	r3, [pc, #48]	@ (80005d4 <HAL_MspInit+0x44>)
 80005a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a6:	2201      	movs	r2, #1
 80005a8:	4013      	ands	r3, r2
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ae:	4b09      	ldr	r3, [pc, #36]	@ (80005d4 <HAL_MspInit+0x44>)
 80005b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80005b2:	4b08      	ldr	r3, [pc, #32]	@ (80005d4 <HAL_MspInit+0x44>)
 80005b4:	2180      	movs	r1, #128	@ 0x80
 80005b6:	0549      	lsls	r1, r1, #21
 80005b8:	430a      	orrs	r2, r1
 80005ba:	63da      	str	r2, [r3, #60]	@ 0x3c
 80005bc:	4b05      	ldr	r3, [pc, #20]	@ (80005d4 <HAL_MspInit+0x44>)
 80005be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80005c0:	2380      	movs	r3, #128	@ 0x80
 80005c2:	055b      	lsls	r3, r3, #21
 80005c4:	4013      	ands	r3, r2
 80005c6:	603b      	str	r3, [r7, #0]
 80005c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ca:	46c0      	nop			@ (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	b002      	add	sp, #8
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	46c0      	nop			@ (mov r8, r8)
 80005d4:	40021000 	.word	0x40021000

080005d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a0e      	ldr	r2, [pc, #56]	@ (8000620 <HAL_TIM_Base_MspInit+0x48>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d115      	bne.n	8000616 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80005ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000624 <HAL_TIM_Base_MspInit+0x4c>)
 80005ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80005ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000624 <HAL_TIM_Base_MspInit+0x4c>)
 80005f0:	2180      	movs	r1, #128	@ 0x80
 80005f2:	02c9      	lsls	r1, r1, #11
 80005f4:	430a      	orrs	r2, r1
 80005f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80005f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000624 <HAL_TIM_Base_MspInit+0x4c>)
 80005fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80005fc:	2380      	movs	r3, #128	@ 0x80
 80005fe:	02db      	lsls	r3, r3, #11
 8000600:	4013      	ands	r3, r2
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8000606:	2200      	movs	r2, #0
 8000608:	2100      	movs	r1, #0
 800060a:	2016      	movs	r0, #22
 800060c:	f000 f9b8 	bl	8000980 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000610:	2016      	movs	r0, #22
 8000612:	f000 f9ca 	bl	80009aa <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM17_MspInit 1 */

  }

}
 8000616:	46c0      	nop			@ (mov r8, r8)
 8000618:	46bd      	mov	sp, r7
 800061a:	b004      	add	sp, #16
 800061c:	bd80      	pop	{r7, pc}
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	40014800 	.word	0x40014800
 8000624:	40021000 	.word	0x40021000

08000628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800062c:	46c0      	nop			@ (mov r8, r8)
 800062e:	e7fd      	b.n	800062c <NMI_Handler+0x4>

08000630 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000634:	46c0      	nop			@ (mov r8, r8)
 8000636:	e7fd      	b.n	8000634 <HardFault_Handler+0x4>

08000638 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800063c:	46c0      	nop			@ (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000642:	b580      	push	{r7, lr}
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000646:	46c0      	nop			@ (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000650:	f000 f8b2 	bl	80007b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000654:	46c0      	nop			@ (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SWITCH_Pin);
 800065e:	2002      	movs	r0, #2
 8000660:	f000 fb5c 	bl	8000d1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000664:	46c0      	nop			@ (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000670:	4b03      	ldr	r3, [pc, #12]	@ (8000680 <TIM17_IRQHandler+0x14>)
 8000672:	0018      	movs	r0, r3
 8000674:	f001 f9be 	bl	80019f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000678:	46c0      	nop			@ (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	46c0      	nop			@ (mov r8, r8)
 8000680:	20000028 	.word	0x20000028

08000684 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000688:	46c0      	nop			@ (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000690:	480d      	ldr	r0, [pc, #52]	@ (80006c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000692:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000694:	f7ff fff6 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000698:	480c      	ldr	r0, [pc, #48]	@ (80006cc <LoopForever+0x6>)
  ldr r1, =_edata
 800069a:	490d      	ldr	r1, [pc, #52]	@ (80006d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800069c:	4a0d      	ldr	r2, [pc, #52]	@ (80006d4 <LoopForever+0xe>)
  movs r3, #0
 800069e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a0:	e002      	b.n	80006a8 <LoopCopyDataInit>

080006a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006a6:	3304      	adds	r3, #4

080006a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006ac:	d3f9      	bcc.n	80006a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ae:	4a0a      	ldr	r2, [pc, #40]	@ (80006d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006b0:	4c0a      	ldr	r4, [pc, #40]	@ (80006dc <LoopForever+0x16>)
  movs r3, #0
 80006b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b4:	e001      	b.n	80006ba <LoopFillZerobss>

080006b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b8:	3204      	adds	r2, #4

080006ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006bc:	d3fb      	bcc.n	80006b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006be:	f001 fb65 	bl	8001d8c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80006c2:	f7ff fdab 	bl	800021c <main>

080006c6 <LoopForever>:

LoopForever:
  b LoopForever
 80006c6:	e7fe      	b.n	80006c6 <LoopForever>
  ldr   r0, =_estack
 80006c8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80006cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006d4:	08001e34 	.word	0x08001e34
  ldr r2, =_sbss
 80006d8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006dc:	2000007c 	.word	0x2000007c

080006e0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e0:	e7fe      	b.n	80006e0 <ADC1_IRQHandler>
	...

080006e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006ea:	1dfb      	adds	r3, r7, #7
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000720 <HAL_Init+0x3c>)
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000720 <HAL_Init+0x3c>)
 80006f6:	2180      	movs	r1, #128	@ 0x80
 80006f8:	0049      	lsls	r1, r1, #1
 80006fa:	430a      	orrs	r2, r1
 80006fc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006fe:	2000      	movs	r0, #0
 8000700:	f000 f810 	bl	8000724 <HAL_InitTick>
 8000704:	1e03      	subs	r3, r0, #0
 8000706:	d003      	beq.n	8000710 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000708:	1dfb      	adds	r3, r7, #7
 800070a:	2201      	movs	r2, #1
 800070c:	701a      	strb	r2, [r3, #0]
 800070e:	e001      	b.n	8000714 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000710:	f7ff ff3e 	bl	8000590 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000714:	1dfb      	adds	r3, r7, #7
 8000716:	781b      	ldrb	r3, [r3, #0]
}
 8000718:	0018      	movs	r0, r3
 800071a:	46bd      	mov	sp, r7
 800071c:	b002      	add	sp, #8
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40022000 	.word	0x40022000

08000724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000724:	b590      	push	{r4, r7, lr}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800072c:	230f      	movs	r3, #15
 800072e:	18fb      	adds	r3, r7, r3
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000734:	4b1d      	ldr	r3, [pc, #116]	@ (80007ac <HAL_InitTick+0x88>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d02b      	beq.n	8000794 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800073c:	4b1c      	ldr	r3, [pc, #112]	@ (80007b0 <HAL_InitTick+0x8c>)
 800073e:	681c      	ldr	r4, [r3, #0]
 8000740:	4b1a      	ldr	r3, [pc, #104]	@ (80007ac <HAL_InitTick+0x88>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	0019      	movs	r1, r3
 8000746:	23fa      	movs	r3, #250	@ 0xfa
 8000748:	0098      	lsls	r0, r3, #2
 800074a:	f7ff fcdb 	bl	8000104 <__udivsi3>
 800074e:	0003      	movs	r3, r0
 8000750:	0019      	movs	r1, r3
 8000752:	0020      	movs	r0, r4
 8000754:	f7ff fcd6 	bl	8000104 <__udivsi3>
 8000758:	0003      	movs	r3, r0
 800075a:	0018      	movs	r0, r3
 800075c:	f000 f935 	bl	80009ca <HAL_SYSTICK_Config>
 8000760:	1e03      	subs	r3, r0, #0
 8000762:	d112      	bne.n	800078a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b03      	cmp	r3, #3
 8000768:	d80a      	bhi.n	8000780 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800076a:	6879      	ldr	r1, [r7, #4]
 800076c:	2301      	movs	r3, #1
 800076e:	425b      	negs	r3, r3
 8000770:	2200      	movs	r2, #0
 8000772:	0018      	movs	r0, r3
 8000774:	f000 f904 	bl	8000980 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000778:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <HAL_InitTick+0x90>)
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	e00d      	b.n	800079c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000780:	230f      	movs	r3, #15
 8000782:	18fb      	adds	r3, r7, r3
 8000784:	2201      	movs	r2, #1
 8000786:	701a      	strb	r2, [r3, #0]
 8000788:	e008      	b.n	800079c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800078a:	230f      	movs	r3, #15
 800078c:	18fb      	adds	r3, r7, r3
 800078e:	2201      	movs	r2, #1
 8000790:	701a      	strb	r2, [r3, #0]
 8000792:	e003      	b.n	800079c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000794:	230f      	movs	r3, #15
 8000796:	18fb      	adds	r3, r7, r3
 8000798:	2201      	movs	r2, #1
 800079a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800079c:	230f      	movs	r3, #15
 800079e:	18fb      	adds	r3, r7, r3
 80007a0:	781b      	ldrb	r3, [r3, #0]
}
 80007a2:	0018      	movs	r0, r3
 80007a4:	46bd      	mov	sp, r7
 80007a6:	b005      	add	sp, #20
 80007a8:	bd90      	pop	{r4, r7, pc}
 80007aa:	46c0      	nop			@ (mov r8, r8)
 80007ac:	20000008 	.word	0x20000008
 80007b0:	20000000 	.word	0x20000000
 80007b4:	20000004 	.word	0x20000004

080007b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007bc:	4b05      	ldr	r3, [pc, #20]	@ (80007d4 <HAL_IncTick+0x1c>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	001a      	movs	r2, r3
 80007c2:	4b05      	ldr	r3, [pc, #20]	@ (80007d8 <HAL_IncTick+0x20>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	18d2      	adds	r2, r2, r3
 80007c8:	4b03      	ldr	r3, [pc, #12]	@ (80007d8 <HAL_IncTick+0x20>)
 80007ca:	601a      	str	r2, [r3, #0]
}
 80007cc:	46c0      	nop			@ (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	46c0      	nop			@ (mov r8, r8)
 80007d4:	20000008 	.word	0x20000008
 80007d8:	20000078 	.word	0x20000078

080007dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  return uwTick;
 80007e0:	4b02      	ldr	r3, [pc, #8]	@ (80007ec <HAL_GetTick+0x10>)
 80007e2:	681b      	ldr	r3, [r3, #0]
}
 80007e4:	0018      	movs	r0, r3
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	46c0      	nop			@ (mov r8, r8)
 80007ec:	20000078 	.word	0x20000078

080007f0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80007f4:	4b04      	ldr	r3, [pc, #16]	@ (8000808 <HAL_SuspendTick+0x18>)
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	4b03      	ldr	r3, [pc, #12]	@ (8000808 <HAL_SuspendTick+0x18>)
 80007fa:	2102      	movs	r1, #2
 80007fc:	438a      	bics	r2, r1
 80007fe:	601a      	str	r2, [r3, #0]
}
 8000800:	46c0      	nop			@ (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	46c0      	nop			@ (mov r8, r8)
 8000808:	e000e010 	.word	0xe000e010

0800080c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000810:	4b04      	ldr	r3, [pc, #16]	@ (8000824 <HAL_ResumeTick+0x18>)
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	4b03      	ldr	r3, [pc, #12]	@ (8000824 <HAL_ResumeTick+0x18>)
 8000816:	2102      	movs	r1, #2
 8000818:	430a      	orrs	r2, r1
 800081a:	601a      	str	r2, [r3, #0]
}
 800081c:	46c0      	nop			@ (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	46c0      	nop			@ (mov r8, r8)
 8000824:	e000e010 	.word	0xe000e010

08000828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	0002      	movs	r2, r0
 8000830:	1dfb      	adds	r3, r7, #7
 8000832:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000834:	1dfb      	adds	r3, r7, #7
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b7f      	cmp	r3, #127	@ 0x7f
 800083a:	d809      	bhi.n	8000850 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800083c:	1dfb      	adds	r3, r7, #7
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	001a      	movs	r2, r3
 8000842:	231f      	movs	r3, #31
 8000844:	401a      	ands	r2, r3
 8000846:	4b04      	ldr	r3, [pc, #16]	@ (8000858 <__NVIC_EnableIRQ+0x30>)
 8000848:	2101      	movs	r1, #1
 800084a:	4091      	lsls	r1, r2
 800084c:	000a      	movs	r2, r1
 800084e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000850:	46c0      	nop			@ (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	b002      	add	sp, #8
 8000856:	bd80      	pop	{r7, pc}
 8000858:	e000e100 	.word	0xe000e100

0800085c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	0002      	movs	r2, r0
 8000864:	6039      	str	r1, [r7, #0]
 8000866:	1dfb      	adds	r3, r7, #7
 8000868:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800086a:	1dfb      	adds	r3, r7, #7
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000870:	d828      	bhi.n	80008c4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000872:	4a2f      	ldr	r2, [pc, #188]	@ (8000930 <__NVIC_SetPriority+0xd4>)
 8000874:	1dfb      	adds	r3, r7, #7
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	b25b      	sxtb	r3, r3
 800087a:	089b      	lsrs	r3, r3, #2
 800087c:	33c0      	adds	r3, #192	@ 0xc0
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	589b      	ldr	r3, [r3, r2]
 8000882:	1dfa      	adds	r2, r7, #7
 8000884:	7812      	ldrb	r2, [r2, #0]
 8000886:	0011      	movs	r1, r2
 8000888:	2203      	movs	r2, #3
 800088a:	400a      	ands	r2, r1
 800088c:	00d2      	lsls	r2, r2, #3
 800088e:	21ff      	movs	r1, #255	@ 0xff
 8000890:	4091      	lsls	r1, r2
 8000892:	000a      	movs	r2, r1
 8000894:	43d2      	mvns	r2, r2
 8000896:	401a      	ands	r2, r3
 8000898:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	019b      	lsls	r3, r3, #6
 800089e:	22ff      	movs	r2, #255	@ 0xff
 80008a0:	401a      	ands	r2, r3
 80008a2:	1dfb      	adds	r3, r7, #7
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	0018      	movs	r0, r3
 80008a8:	2303      	movs	r3, #3
 80008aa:	4003      	ands	r3, r0
 80008ac:	00db      	lsls	r3, r3, #3
 80008ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008b0:	481f      	ldr	r0, [pc, #124]	@ (8000930 <__NVIC_SetPriority+0xd4>)
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	b25b      	sxtb	r3, r3
 80008b8:	089b      	lsrs	r3, r3, #2
 80008ba:	430a      	orrs	r2, r1
 80008bc:	33c0      	adds	r3, #192	@ 0xc0
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008c2:	e031      	b.n	8000928 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000934 <__NVIC_SetPriority+0xd8>)
 80008c6:	1dfb      	adds	r3, r7, #7
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	0019      	movs	r1, r3
 80008cc:	230f      	movs	r3, #15
 80008ce:	400b      	ands	r3, r1
 80008d0:	3b08      	subs	r3, #8
 80008d2:	089b      	lsrs	r3, r3, #2
 80008d4:	3306      	adds	r3, #6
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	18d3      	adds	r3, r2, r3
 80008da:	3304      	adds	r3, #4
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	1dfa      	adds	r2, r7, #7
 80008e0:	7812      	ldrb	r2, [r2, #0]
 80008e2:	0011      	movs	r1, r2
 80008e4:	2203      	movs	r2, #3
 80008e6:	400a      	ands	r2, r1
 80008e8:	00d2      	lsls	r2, r2, #3
 80008ea:	21ff      	movs	r1, #255	@ 0xff
 80008ec:	4091      	lsls	r1, r2
 80008ee:	000a      	movs	r2, r1
 80008f0:	43d2      	mvns	r2, r2
 80008f2:	401a      	ands	r2, r3
 80008f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	019b      	lsls	r3, r3, #6
 80008fa:	22ff      	movs	r2, #255	@ 0xff
 80008fc:	401a      	ands	r2, r3
 80008fe:	1dfb      	adds	r3, r7, #7
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	0018      	movs	r0, r3
 8000904:	2303      	movs	r3, #3
 8000906:	4003      	ands	r3, r0
 8000908:	00db      	lsls	r3, r3, #3
 800090a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800090c:	4809      	ldr	r0, [pc, #36]	@ (8000934 <__NVIC_SetPriority+0xd8>)
 800090e:	1dfb      	adds	r3, r7, #7
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	001c      	movs	r4, r3
 8000914:	230f      	movs	r3, #15
 8000916:	4023      	ands	r3, r4
 8000918:	3b08      	subs	r3, #8
 800091a:	089b      	lsrs	r3, r3, #2
 800091c:	430a      	orrs	r2, r1
 800091e:	3306      	adds	r3, #6
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	18c3      	adds	r3, r0, r3
 8000924:	3304      	adds	r3, #4
 8000926:	601a      	str	r2, [r3, #0]
}
 8000928:	46c0      	nop			@ (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	b003      	add	sp, #12
 800092e:	bd90      	pop	{r4, r7, pc}
 8000930:	e000e100 	.word	0xe000e100
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	1e5a      	subs	r2, r3, #1
 8000944:	2380      	movs	r3, #128	@ 0x80
 8000946:	045b      	lsls	r3, r3, #17
 8000948:	429a      	cmp	r2, r3
 800094a:	d301      	bcc.n	8000950 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800094c:	2301      	movs	r3, #1
 800094e:	e010      	b.n	8000972 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000950:	4b0a      	ldr	r3, [pc, #40]	@ (800097c <SysTick_Config+0x44>)
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	3a01      	subs	r2, #1
 8000956:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000958:	2301      	movs	r3, #1
 800095a:	425b      	negs	r3, r3
 800095c:	2103      	movs	r1, #3
 800095e:	0018      	movs	r0, r3
 8000960:	f7ff ff7c 	bl	800085c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000964:	4b05      	ldr	r3, [pc, #20]	@ (800097c <SysTick_Config+0x44>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800096a:	4b04      	ldr	r3, [pc, #16]	@ (800097c <SysTick_Config+0x44>)
 800096c:	2207      	movs	r2, #7
 800096e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000970:	2300      	movs	r3, #0
}
 8000972:	0018      	movs	r0, r3
 8000974:	46bd      	mov	sp, r7
 8000976:	b002      	add	sp, #8
 8000978:	bd80      	pop	{r7, pc}
 800097a:	46c0      	nop			@ (mov r8, r8)
 800097c:	e000e010 	.word	0xe000e010

08000980 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	60b9      	str	r1, [r7, #8]
 8000988:	607a      	str	r2, [r7, #4]
 800098a:	210f      	movs	r1, #15
 800098c:	187b      	adds	r3, r7, r1
 800098e:	1c02      	adds	r2, r0, #0
 8000990:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000992:	68ba      	ldr	r2, [r7, #8]
 8000994:	187b      	adds	r3, r7, r1
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	b25b      	sxtb	r3, r3
 800099a:	0011      	movs	r1, r2
 800099c:	0018      	movs	r0, r3
 800099e:	f7ff ff5d 	bl	800085c <__NVIC_SetPriority>
}
 80009a2:	46c0      	nop			@ (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b004      	add	sp, #16
 80009a8:	bd80      	pop	{r7, pc}

080009aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b082      	sub	sp, #8
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	0002      	movs	r2, r0
 80009b2:	1dfb      	adds	r3, r7, #7
 80009b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009b6:	1dfb      	adds	r3, r7, #7
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	b25b      	sxtb	r3, r3
 80009bc:	0018      	movs	r0, r3
 80009be:	f7ff ff33 	bl	8000828 <__NVIC_EnableIRQ>
}
 80009c2:	46c0      	nop			@ (mov r8, r8)
 80009c4:	46bd      	mov	sp, r7
 80009c6:	b002      	add	sp, #8
 80009c8:	bd80      	pop	{r7, pc}

080009ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b082      	sub	sp, #8
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	0018      	movs	r0, r3
 80009d6:	f7ff ffaf 	bl	8000938 <SysTick_Config>
 80009da:	0003      	movs	r3, r0
}
 80009dc:	0018      	movs	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	b002      	add	sp, #8
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009f2:	e147      	b.n	8000c84 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2101      	movs	r1, #1
 80009fa:	697a      	ldr	r2, [r7, #20]
 80009fc:	4091      	lsls	r1, r2
 80009fe:	000a      	movs	r2, r1
 8000a00:	4013      	ands	r3, r2
 8000a02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d100      	bne.n	8000a0c <HAL_GPIO_Init+0x28>
 8000a0a:	e138      	b.n	8000c7e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	2203      	movs	r2, #3
 8000a12:	4013      	ands	r3, r2
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d005      	beq.n	8000a24 <HAL_GPIO_Init+0x40>
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	2203      	movs	r2, #3
 8000a1e:	4013      	ands	r3, r2
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d130      	bne.n	8000a86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	2203      	movs	r2, #3
 8000a30:	409a      	lsls	r2, r3
 8000a32:	0013      	movs	r3, r2
 8000a34:	43da      	mvns	r2, r3
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	68da      	ldr	r2, [r3, #12]
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	409a      	lsls	r2, r3
 8000a46:	0013      	movs	r3, r2
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	409a      	lsls	r2, r3
 8000a60:	0013      	movs	r3, r2
 8000a62:	43da      	mvns	r2, r3
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	4013      	ands	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	091b      	lsrs	r3, r3, #4
 8000a70:	2201      	movs	r2, #1
 8000a72:	401a      	ands	r2, r3
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	409a      	lsls	r2, r3
 8000a78:	0013      	movs	r3, r2
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	2203      	movs	r2, #3
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	2b03      	cmp	r3, #3
 8000a90:	d017      	beq.n	8000ac2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	68db      	ldr	r3, [r3, #12]
 8000a96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	2203      	movs	r2, #3
 8000a9e:	409a      	lsls	r2, r3
 8000aa0:	0013      	movs	r3, r2
 8000aa2:	43da      	mvns	r2, r3
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	689a      	ldr	r2, [r3, #8]
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	409a      	lsls	r2, r3
 8000ab4:	0013      	movs	r3, r2
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	2203      	movs	r2, #3
 8000ac8:	4013      	ands	r3, r2
 8000aca:	2b02      	cmp	r3, #2
 8000acc:	d123      	bne.n	8000b16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	08da      	lsrs	r2, r3, #3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	3208      	adds	r2, #8
 8000ad6:	0092      	lsls	r2, r2, #2
 8000ad8:	58d3      	ldr	r3, [r2, r3]
 8000ada:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	2207      	movs	r2, #7
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	220f      	movs	r2, #15
 8000ae6:	409a      	lsls	r2, r3
 8000ae8:	0013      	movs	r3, r2
 8000aea:	43da      	mvns	r2, r3
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	4013      	ands	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	691a      	ldr	r2, [r3, #16]
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	2107      	movs	r1, #7
 8000afa:	400b      	ands	r3, r1
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	409a      	lsls	r2, r3
 8000b00:	0013      	movs	r3, r2
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	08da      	lsrs	r2, r3, #3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3208      	adds	r2, #8
 8000b10:	0092      	lsls	r2, r2, #2
 8000b12:	6939      	ldr	r1, [r7, #16]
 8000b14:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	2203      	movs	r2, #3
 8000b22:	409a      	lsls	r2, r3
 8000b24:	0013      	movs	r3, r2
 8000b26:	43da      	mvns	r2, r3
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	2203      	movs	r2, #3
 8000b34:	401a      	ands	r2, r3
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	409a      	lsls	r2, r3
 8000b3c:	0013      	movs	r3, r2
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685a      	ldr	r2, [r3, #4]
 8000b4e:	23c0      	movs	r3, #192	@ 0xc0
 8000b50:	029b      	lsls	r3, r3, #10
 8000b52:	4013      	ands	r3, r2
 8000b54:	d100      	bne.n	8000b58 <HAL_GPIO_Init+0x174>
 8000b56:	e092      	b.n	8000c7e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000b58:	4a50      	ldr	r2, [pc, #320]	@ (8000c9c <HAL_GPIO_Init+0x2b8>)
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	089b      	lsrs	r3, r3, #2
 8000b5e:	3318      	adds	r3, #24
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	589b      	ldr	r3, [r3, r2]
 8000b64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	2203      	movs	r2, #3
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	220f      	movs	r2, #15
 8000b70:	409a      	lsls	r2, r3
 8000b72:	0013      	movs	r3, r2
 8000b74:	43da      	mvns	r2, r3
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	23a0      	movs	r3, #160	@ 0xa0
 8000b80:	05db      	lsls	r3, r3, #23
 8000b82:	429a      	cmp	r2, r3
 8000b84:	d013      	beq.n	8000bae <HAL_GPIO_Init+0x1ca>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4a45      	ldr	r2, [pc, #276]	@ (8000ca0 <HAL_GPIO_Init+0x2bc>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d00d      	beq.n	8000baa <HAL_GPIO_Init+0x1c6>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a44      	ldr	r2, [pc, #272]	@ (8000ca4 <HAL_GPIO_Init+0x2c0>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d007      	beq.n	8000ba6 <HAL_GPIO_Init+0x1c2>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a43      	ldr	r2, [pc, #268]	@ (8000ca8 <HAL_GPIO_Init+0x2c4>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d101      	bne.n	8000ba2 <HAL_GPIO_Init+0x1be>
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	e006      	b.n	8000bb0 <HAL_GPIO_Init+0x1cc>
 8000ba2:	2305      	movs	r3, #5
 8000ba4:	e004      	b.n	8000bb0 <HAL_GPIO_Init+0x1cc>
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	e002      	b.n	8000bb0 <HAL_GPIO_Init+0x1cc>
 8000baa:	2301      	movs	r3, #1
 8000bac:	e000      	b.n	8000bb0 <HAL_GPIO_Init+0x1cc>
 8000bae:	2300      	movs	r3, #0
 8000bb0:	697a      	ldr	r2, [r7, #20]
 8000bb2:	2103      	movs	r1, #3
 8000bb4:	400a      	ands	r2, r1
 8000bb6:	00d2      	lsls	r2, r2, #3
 8000bb8:	4093      	lsls	r3, r2
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000bc0:	4936      	ldr	r1, [pc, #216]	@ (8000c9c <HAL_GPIO_Init+0x2b8>)
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	089b      	lsrs	r3, r3, #2
 8000bc6:	3318      	adds	r3, #24
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000bce:	4b33      	ldr	r3, [pc, #204]	@ (8000c9c <HAL_GPIO_Init+0x2b8>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	43da      	mvns	r2, r3
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685a      	ldr	r2, [r3, #4]
 8000be2:	2380      	movs	r3, #128	@ 0x80
 8000be4:	035b      	lsls	r3, r3, #13
 8000be6:	4013      	ands	r3, r2
 8000be8:	d003      	beq.n	8000bf2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000bf2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c9c <HAL_GPIO_Init+0x2b8>)
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000bf8:	4b28      	ldr	r3, [pc, #160]	@ (8000c9c <HAL_GPIO_Init+0x2b8>)
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	43da      	mvns	r2, r3
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	4013      	ands	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685a      	ldr	r2, [r3, #4]
 8000c0c:	2380      	movs	r3, #128	@ 0x80
 8000c0e:	039b      	lsls	r3, r3, #14
 8000c10:	4013      	ands	r3, r2
 8000c12:	d003      	beq.n	8000c1c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c9c <HAL_GPIO_Init+0x2b8>)
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c22:	4a1e      	ldr	r2, [pc, #120]	@ (8000c9c <HAL_GPIO_Init+0x2b8>)
 8000c24:	2384      	movs	r3, #132	@ 0x84
 8000c26:	58d3      	ldr	r3, [r2, r3]
 8000c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	43da      	mvns	r2, r3
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	4013      	ands	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685a      	ldr	r2, [r3, #4]
 8000c38:	2380      	movs	r3, #128	@ 0x80
 8000c3a:	029b      	lsls	r3, r3, #10
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	d003      	beq.n	8000c48 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c48:	4914      	ldr	r1, [pc, #80]	@ (8000c9c <HAL_GPIO_Init+0x2b8>)
 8000c4a:	2284      	movs	r2, #132	@ 0x84
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000c50:	4a12      	ldr	r2, [pc, #72]	@ (8000c9c <HAL_GPIO_Init+0x2b8>)
 8000c52:	2380      	movs	r3, #128	@ 0x80
 8000c54:	58d3      	ldr	r3, [r2, r3]
 8000c56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	43da      	mvns	r2, r3
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685a      	ldr	r2, [r3, #4]
 8000c66:	2380      	movs	r3, #128	@ 0x80
 8000c68:	025b      	lsls	r3, r3, #9
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	d003      	beq.n	8000c76 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c76:	4909      	ldr	r1, [pc, #36]	@ (8000c9c <HAL_GPIO_Init+0x2b8>)
 8000c78:	2280      	movs	r2, #128	@ 0x80
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	3301      	adds	r3, #1
 8000c82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	40da      	lsrs	r2, r3
 8000c8c:	1e13      	subs	r3, r2, #0
 8000c8e:	d000      	beq.n	8000c92 <HAL_GPIO_Init+0x2ae>
 8000c90:	e6b0      	b.n	80009f4 <HAL_GPIO_Init+0x10>
  }
}
 8000c92:	46c0      	nop			@ (mov r8, r8)
 8000c94:	46c0      	nop			@ (mov r8, r8)
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b006      	add	sp, #24
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40021800 	.word	0x40021800
 8000ca0:	50000400 	.word	0x50000400
 8000ca4:	50000800 	.word	0x50000800
 8000ca8:	50000c00 	.word	0x50000c00

08000cac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	0008      	movs	r0, r1
 8000cb6:	0011      	movs	r1, r2
 8000cb8:	1cbb      	adds	r3, r7, #2
 8000cba:	1c02      	adds	r2, r0, #0
 8000cbc:	801a      	strh	r2, [r3, #0]
 8000cbe:	1c7b      	adds	r3, r7, #1
 8000cc0:	1c0a      	adds	r2, r1, #0
 8000cc2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cc4:	1c7b      	adds	r3, r7, #1
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d004      	beq.n	8000cd6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ccc:	1cbb      	adds	r3, r7, #2
 8000cce:	881a      	ldrh	r2, [r3, #0]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cd4:	e003      	b.n	8000cde <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cd6:	1cbb      	adds	r3, r7, #2
 8000cd8:	881a      	ldrh	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000cde:	46c0      	nop			@ (mov r8, r8)
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	b002      	add	sp, #8
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b084      	sub	sp, #16
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
 8000cee:	000a      	movs	r2, r1
 8000cf0:	1cbb      	adds	r3, r7, #2
 8000cf2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	695b      	ldr	r3, [r3, #20]
 8000cf8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000cfa:	1cbb      	adds	r3, r7, #2
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	4013      	ands	r3, r2
 8000d02:	041a      	lsls	r2, r3, #16
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	43db      	mvns	r3, r3
 8000d08:	1cb9      	adds	r1, r7, #2
 8000d0a:	8809      	ldrh	r1, [r1, #0]
 8000d0c:	400b      	ands	r3, r1
 8000d0e:	431a      	orrs	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	619a      	str	r2, [r3, #24]
}
 8000d14:	46c0      	nop			@ (mov r8, r8)
 8000d16:	46bd      	mov	sp, r7
 8000d18:	b004      	add	sp, #16
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	0002      	movs	r2, r0
 8000d24:	1dbb      	adds	r3, r7, #6
 8000d26:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8000d28:	4b10      	ldr	r3, [pc, #64]	@ (8000d6c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	1dba      	adds	r2, r7, #6
 8000d2e:	8812      	ldrh	r2, [r2, #0]
 8000d30:	4013      	ands	r3, r2
 8000d32:	d008      	beq.n	8000d46 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000d34:	4b0d      	ldr	r3, [pc, #52]	@ (8000d6c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000d36:	1dba      	adds	r2, r7, #6
 8000d38:	8812      	ldrh	r2, [r2, #0]
 8000d3a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000d3c:	1dbb      	adds	r3, r7, #6
 8000d3e:	881b      	ldrh	r3, [r3, #0]
 8000d40:	0018      	movs	r0, r3
 8000d42:	f000 f815 	bl	8000d70 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8000d46:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000d48:	691b      	ldr	r3, [r3, #16]
 8000d4a:	1dba      	adds	r2, r7, #6
 8000d4c:	8812      	ldrh	r2, [r2, #0]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	d008      	beq.n	8000d64 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8000d52:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000d54:	1dba      	adds	r2, r7, #6
 8000d56:	8812      	ldrh	r2, [r2, #0]
 8000d58:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000d5a:	1dbb      	adds	r3, r7, #6
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f7ff fb8e 	bl	8000480 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8000d64:	46c0      	nop			@ (mov r8, r8)
 8000d66:	46bd      	mov	sp, r7
 8000d68:	b002      	add	sp, #8
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40021800 	.word	0x40021800

08000d70 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	0002      	movs	r2, r0
 8000d78:	1dbb      	adds	r3, r7, #6
 8000d7a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8000d7c:	46c0      	nop			@ (mov r8, r8)
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	b002      	add	sp, #8
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <HAL_PWR_EnterSLEEPMode>:
  * @note   When WFI entry is used, tick interrupt have to be disabled if not
  *         desired as the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	000a      	movs	r2, r1
 8000d8e:	1cfb      	adds	r3, r7, #3
 8000d90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator != PWR_MAINREGULATOR_ON)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d008      	beq.n	8000daa <HAL_PWR_EnterSLEEPMode+0x26>
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if ((PWR->SR2 & PWR_SR2_REGLPF) == 0x00u)
 8000d98:	4b13      	ldr	r3, [pc, #76]	@ (8000de8 <HAL_PWR_EnterSLEEPMode+0x64>)
 8000d9a:	695a      	ldr	r2, [r3, #20]
 8000d9c:	2380      	movs	r3, #128	@ 0x80
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	4013      	ands	r3, r2
 8000da2:	d10c      	bne.n	8000dbe <HAL_PWR_EnterSLEEPMode+0x3a>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8000da4:	f000 f864 	bl	8000e70 <HAL_PWREx_EnableLowPowerRunMode>
 8000da8:	e009      	b.n	8000dbe <HAL_PWR_EnterSLEEPMode+0x3a>
    }
  }
  else
  {
    /* If in low-power run mode at this point, exit it */
    if ((PWR->SR2 & PWR_SR2_REGLPF) != 0x00u)
 8000daa:	4b0f      	ldr	r3, [pc, #60]	@ (8000de8 <HAL_PWR_EnterSLEEPMode+0x64>)
 8000dac:	695a      	ldr	r2, [r3, #20]
 8000dae:	2380      	movs	r3, #128	@ 0x80
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	4013      	ands	r3, r2
 8000db4:	d003      	beq.n	8000dbe <HAL_PWR_EnterSLEEPMode+0x3a>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8000db6:	f000 f869 	bl	8000e8c <HAL_PWREx_DisableLowPowerRunMode>
 8000dba:	1e03      	subs	r3, r0, #0
 8000dbc:	d10f      	bne.n	8000dde <HAL_PWR_EnterSLEEPMode+0x5a>
      }
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <HAL_PWR_EnterSLEEPMode+0x68>)
 8000dc0:	691a      	ldr	r2, [r3, #16]
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dec <HAL_PWR_EnterSLEEPMode+0x68>)
 8000dc4:	2104      	movs	r1, #4
 8000dc6:	438a      	bics	r2, r1
 8000dc8:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8000dca:	1cfb      	adds	r3, r7, #3
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d101      	bne.n	8000dd6 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8000dd2:	bf30      	wfi
 8000dd4:	e004      	b.n	8000de0 <HAL_PWR_EnterSLEEPMode+0x5c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8000dd6:	bf40      	sev
    __WFE();
 8000dd8:	bf20      	wfe
    __WFE();
 8000dda:	bf20      	wfe
 8000ddc:	e000      	b.n	8000de0 <HAL_PWR_EnterSLEEPMode+0x5c>
        return ;
 8000dde:	46c0      	nop			@ (mov r8, r8)
  }
}
 8000de0:	46bd      	mov	sp, r7
 8000de2:	b002      	add	sp, #8
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			@ (mov r8, r8)
 8000de8:	40007000 	.word	0x40007000
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000df8:	4b19      	ldr	r3, [pc, #100]	@ (8000e60 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a19      	ldr	r2, [pc, #100]	@ (8000e64 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000dfe:	4013      	ands	r3, r2
 8000e00:	0019      	movs	r1, r3
 8000e02:	4b17      	ldr	r3, [pc, #92]	@ (8000e60 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	430a      	orrs	r2, r1
 8000e08:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	2380      	movs	r3, #128	@ 0x80
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d11f      	bne.n	8000e54 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000e14:	4b14      	ldr	r3, [pc, #80]	@ (8000e68 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	0013      	movs	r3, r2
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	189b      	adds	r3, r3, r2
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	4912      	ldr	r1, [pc, #72]	@ (8000e6c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000e22:	0018      	movs	r0, r3
 8000e24:	f7ff f96e 	bl	8000104 <__udivsi3>
 8000e28:	0003      	movs	r3, r0
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e2e:	e008      	b.n	8000e42 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d003      	beq.n	8000e3e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	e001      	b.n	8000e42 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e009      	b.n	8000e56 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e42:	4b07      	ldr	r3, [pc, #28]	@ (8000e60 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000e44:	695a      	ldr	r2, [r3, #20]
 8000e46:	2380      	movs	r3, #128	@ 0x80
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	2380      	movs	r3, #128	@ 0x80
 8000e4e:	00db      	lsls	r3, r3, #3
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d0ed      	beq.n	8000e30 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	0018      	movs	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b004      	add	sp, #16
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	46c0      	nop			@ (mov r8, r8)
 8000e60:	40007000 	.word	0x40007000
 8000e64:	fffff9ff 	.word	0xfffff9ff
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	000f4240 	.word	0x000f4240

08000e70 <HAL_PWREx_EnableLowPowerRunMode>:
  *        low power run mode
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8000e74:	4b04      	ldr	r3, [pc, #16]	@ (8000e88 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b03      	ldr	r3, [pc, #12]	@ (8000e88 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8000e7a:	2180      	movs	r1, #128	@ 0x80
 8000e7c:	01c9      	lsls	r1, r1, #7
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	601a      	str	r2, [r3, #0]
}
 8000e82:	46c0      	nop			@ (mov r8, r8)
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40007000 	.word	0x40007000

08000e8c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index = ((PWR_REGLPF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000e92:	4b15      	ldr	r3, [pc, #84]	@ (8000ee8 <HAL_PWREx_DisableLowPowerRunMode+0x5c>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	0013      	movs	r3, r2
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	189b      	adds	r3, r3, r2
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	4913      	ldr	r1, [pc, #76]	@ (8000eec <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f7ff f92f 	bl	8000104 <__udivsi3>
 8000ea6:	0003      	movs	r3, r0
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	607b      	str	r3, [r7, #4]

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8000eac:	4b10      	ldr	r3, [pc, #64]	@ (8000ef0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8000eb2:	4910      	ldr	r1, [pc, #64]	@ (8000ef4 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8000eb4:	400a      	ands	r2, r1
 8000eb6:	601a      	str	r2, [r3, #0]

  /* Wait until REGLPF is reset */
  while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8000eb8:	e008      	b.n	8000ecc <HAL_PWREx_DisableLowPowerRunMode+0x40>
  {
    if (wait_loop_index != 0U)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d003      	beq.n	8000ec8 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
    {
      wait_loop_index--;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	e001      	b.n	8000ecc <HAL_PWREx_DisableLowPowerRunMode+0x40>
    }
    else
    {
      return HAL_TIMEOUT;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	e009      	b.n	8000ee0 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8000ecc:	4b08      	ldr	r3, [pc, #32]	@ (8000ef0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8000ece:	695a      	ldr	r2, [r3, #20]
 8000ed0:	2380      	movs	r3, #128	@ 0x80
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	401a      	ands	r2, r3
 8000ed6:	2380      	movs	r3, #128	@ 0x80
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d0ed      	beq.n	8000eba <HAL_PWREx_DisableLowPowerRunMode+0x2e>
    }
  }

  return HAL_OK;
 8000ede:	2300      	movs	r3, #0
}
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	b002      	add	sp, #8
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000000 	.word	0x20000000
 8000eec:	000f4240 	.word	0x000f4240
 8000ef0:	40007000 	.word	0x40007000
 8000ef4:	ffffbfff 	.word	0xffffbfff

08000ef8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b088      	sub	sp, #32
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d101      	bne.n	8000f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e2fe      	b.n	8001508 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2201      	movs	r2, #1
 8000f10:	4013      	ands	r3, r2
 8000f12:	d100      	bne.n	8000f16 <HAL_RCC_OscConfig+0x1e>
 8000f14:	e07c      	b.n	8001010 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f16:	4bc3      	ldr	r3, [pc, #780]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	2238      	movs	r2, #56	@ 0x38
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f20:	4bc0      	ldr	r3, [pc, #768]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	2203      	movs	r2, #3
 8000f26:	4013      	ands	r3, r2
 8000f28:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	2b10      	cmp	r3, #16
 8000f2e:	d102      	bne.n	8000f36 <HAL_RCC_OscConfig+0x3e>
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	d002      	beq.n	8000f3c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	2b08      	cmp	r3, #8
 8000f3a:	d10b      	bne.n	8000f54 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3c:	4bb9      	ldr	r3, [pc, #740]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	2380      	movs	r3, #128	@ 0x80
 8000f42:	029b      	lsls	r3, r3, #10
 8000f44:	4013      	ands	r3, r2
 8000f46:	d062      	beq.n	800100e <HAL_RCC_OscConfig+0x116>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d15e      	bne.n	800100e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e2d9      	b.n	8001508 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685a      	ldr	r2, [r3, #4]
 8000f58:	2380      	movs	r3, #128	@ 0x80
 8000f5a:	025b      	lsls	r3, r3, #9
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d107      	bne.n	8000f70 <HAL_RCC_OscConfig+0x78>
 8000f60:	4bb0      	ldr	r3, [pc, #704]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4baf      	ldr	r3, [pc, #700]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 8000f66:	2180      	movs	r1, #128	@ 0x80
 8000f68:	0249      	lsls	r1, r1, #9
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	e020      	b.n	8000fb2 <HAL_RCC_OscConfig+0xba>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	23a0      	movs	r3, #160	@ 0xa0
 8000f76:	02db      	lsls	r3, r3, #11
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d10e      	bne.n	8000f9a <HAL_RCC_OscConfig+0xa2>
 8000f7c:	4ba9      	ldr	r3, [pc, #676]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4ba8      	ldr	r3, [pc, #672]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 8000f82:	2180      	movs	r1, #128	@ 0x80
 8000f84:	02c9      	lsls	r1, r1, #11
 8000f86:	430a      	orrs	r2, r1
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	4ba6      	ldr	r3, [pc, #664]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	4ba5      	ldr	r3, [pc, #660]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 8000f90:	2180      	movs	r1, #128	@ 0x80
 8000f92:	0249      	lsls	r1, r1, #9
 8000f94:	430a      	orrs	r2, r1
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	e00b      	b.n	8000fb2 <HAL_RCC_OscConfig+0xba>
 8000f9a:	4ba2      	ldr	r3, [pc, #648]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	4ba1      	ldr	r3, [pc, #644]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 8000fa0:	49a1      	ldr	r1, [pc, #644]	@ (8001228 <HAL_RCC_OscConfig+0x330>)
 8000fa2:	400a      	ands	r2, r1
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	4b9f      	ldr	r3, [pc, #636]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	4b9e      	ldr	r3, [pc, #632]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 8000fac:	499f      	ldr	r1, [pc, #636]	@ (800122c <HAL_RCC_OscConfig+0x334>)
 8000fae:	400a      	ands	r2, r1
 8000fb0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d014      	beq.n	8000fe4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fba:	f7ff fc0f 	bl	80007dc <HAL_GetTick>
 8000fbe:	0003      	movs	r3, r0
 8000fc0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fc2:	e008      	b.n	8000fd6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fc4:	f7ff fc0a 	bl	80007dc <HAL_GetTick>
 8000fc8:	0002      	movs	r2, r0
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b64      	cmp	r3, #100	@ 0x64
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e298      	b.n	8001508 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fd6:	4b93      	ldr	r3, [pc, #588]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	2380      	movs	r3, #128	@ 0x80
 8000fdc:	029b      	lsls	r3, r3, #10
 8000fde:	4013      	ands	r3, r2
 8000fe0:	d0f0      	beq.n	8000fc4 <HAL_RCC_OscConfig+0xcc>
 8000fe2:	e015      	b.n	8001010 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fe4:	f7ff fbfa 	bl	80007dc <HAL_GetTick>
 8000fe8:	0003      	movs	r3, r0
 8000fea:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fec:	e008      	b.n	8001000 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fee:	f7ff fbf5 	bl	80007dc <HAL_GetTick>
 8000ff2:	0002      	movs	r2, r0
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	2b64      	cmp	r3, #100	@ 0x64
 8000ffa:	d901      	bls.n	8001000 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e283      	b.n	8001508 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001000:	4b88      	ldr	r3, [pc, #544]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	2380      	movs	r3, #128	@ 0x80
 8001006:	029b      	lsls	r3, r3, #10
 8001008:	4013      	ands	r3, r2
 800100a:	d1f0      	bne.n	8000fee <HAL_RCC_OscConfig+0xf6>
 800100c:	e000      	b.n	8001010 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800100e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2202      	movs	r2, #2
 8001016:	4013      	ands	r3, r2
 8001018:	d100      	bne.n	800101c <HAL_RCC_OscConfig+0x124>
 800101a:	e099      	b.n	8001150 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800101c:	4b81      	ldr	r3, [pc, #516]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	2238      	movs	r2, #56	@ 0x38
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001026:	4b7f      	ldr	r3, [pc, #508]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	2203      	movs	r2, #3
 800102c:	4013      	ands	r3, r2
 800102e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	2b10      	cmp	r3, #16
 8001034:	d102      	bne.n	800103c <HAL_RCC_OscConfig+0x144>
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	2b02      	cmp	r3, #2
 800103a:	d002      	beq.n	8001042 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d135      	bne.n	80010ae <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001042:	4b78      	ldr	r3, [pc, #480]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	2380      	movs	r3, #128	@ 0x80
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	4013      	ands	r3, r2
 800104c:	d005      	beq.n	800105a <HAL_RCC_OscConfig+0x162>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e256      	b.n	8001508 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800105a:	4b72      	ldr	r3, [pc, #456]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	4a74      	ldr	r2, [pc, #464]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 8001060:	4013      	ands	r3, r2
 8001062:	0019      	movs	r1, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	695b      	ldr	r3, [r3, #20]
 8001068:	021a      	lsls	r2, r3, #8
 800106a:	4b6e      	ldr	r3, [pc, #440]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 800106c:	430a      	orrs	r2, r1
 800106e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d112      	bne.n	800109c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001076:	4b6b      	ldr	r3, [pc, #428]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a6e      	ldr	r2, [pc, #440]	@ (8001234 <HAL_RCC_OscConfig+0x33c>)
 800107c:	4013      	ands	r3, r2
 800107e:	0019      	movs	r1, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	691a      	ldr	r2, [r3, #16]
 8001084:	4b67      	ldr	r3, [pc, #412]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 8001086:	430a      	orrs	r2, r1
 8001088:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800108a:	4b66      	ldr	r3, [pc, #408]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	0adb      	lsrs	r3, r3, #11
 8001090:	2207      	movs	r2, #7
 8001092:	4013      	ands	r3, r2
 8001094:	4a68      	ldr	r2, [pc, #416]	@ (8001238 <HAL_RCC_OscConfig+0x340>)
 8001096:	40da      	lsrs	r2, r3
 8001098:	4b68      	ldr	r3, [pc, #416]	@ (800123c <HAL_RCC_OscConfig+0x344>)
 800109a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800109c:	4b68      	ldr	r3, [pc, #416]	@ (8001240 <HAL_RCC_OscConfig+0x348>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	0018      	movs	r0, r3
 80010a2:	f7ff fb3f 	bl	8000724 <HAL_InitTick>
 80010a6:	1e03      	subs	r3, r0, #0
 80010a8:	d051      	beq.n	800114e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e22c      	b.n	8001508 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d030      	beq.n	8001118 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80010b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a5e      	ldr	r2, [pc, #376]	@ (8001234 <HAL_RCC_OscConfig+0x33c>)
 80010bc:	4013      	ands	r3, r2
 80010be:	0019      	movs	r1, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	691a      	ldr	r2, [r3, #16]
 80010c4:	4b57      	ldr	r3, [pc, #348]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 80010c6:	430a      	orrs	r2, r1
 80010c8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80010ca:	4b56      	ldr	r3, [pc, #344]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	4b55      	ldr	r3, [pc, #340]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 80010d0:	2180      	movs	r1, #128	@ 0x80
 80010d2:	0049      	lsls	r1, r1, #1
 80010d4:	430a      	orrs	r2, r1
 80010d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d8:	f7ff fb80 	bl	80007dc <HAL_GetTick>
 80010dc:	0003      	movs	r3, r0
 80010de:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010e0:	e008      	b.n	80010f4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010e2:	f7ff fb7b 	bl	80007dc <HAL_GetTick>
 80010e6:	0002      	movs	r2, r0
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d901      	bls.n	80010f4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e209      	b.n	8001508 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010f4:	4b4b      	ldr	r3, [pc, #300]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	2380      	movs	r3, #128	@ 0x80
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	4013      	ands	r3, r2
 80010fe:	d0f0      	beq.n	80010e2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001100:	4b48      	ldr	r3, [pc, #288]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	4a4a      	ldr	r2, [pc, #296]	@ (8001230 <HAL_RCC_OscConfig+0x338>)
 8001106:	4013      	ands	r3, r2
 8001108:	0019      	movs	r1, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	021a      	lsls	r2, r3, #8
 8001110:	4b44      	ldr	r3, [pc, #272]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 8001112:	430a      	orrs	r2, r1
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	e01b      	b.n	8001150 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001118:	4b42      	ldr	r3, [pc, #264]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b41      	ldr	r3, [pc, #260]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 800111e:	4949      	ldr	r1, [pc, #292]	@ (8001244 <HAL_RCC_OscConfig+0x34c>)
 8001120:	400a      	ands	r2, r1
 8001122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001124:	f7ff fb5a 	bl	80007dc <HAL_GetTick>
 8001128:	0003      	movs	r3, r0
 800112a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800112c:	e008      	b.n	8001140 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800112e:	f7ff fb55 	bl	80007dc <HAL_GetTick>
 8001132:	0002      	movs	r2, r0
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e1e3      	b.n	8001508 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001140:	4b38      	ldr	r3, [pc, #224]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	2380      	movs	r3, #128	@ 0x80
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	4013      	ands	r3, r2
 800114a:	d1f0      	bne.n	800112e <HAL_RCC_OscConfig+0x236>
 800114c:	e000      	b.n	8001150 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800114e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2208      	movs	r2, #8
 8001156:	4013      	ands	r3, r2
 8001158:	d047      	beq.n	80011ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800115a:	4b32      	ldr	r3, [pc, #200]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	2238      	movs	r2, #56	@ 0x38
 8001160:	4013      	ands	r3, r2
 8001162:	2b18      	cmp	r3, #24
 8001164:	d10a      	bne.n	800117c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001166:	4b2f      	ldr	r3, [pc, #188]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 8001168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800116a:	2202      	movs	r2, #2
 800116c:	4013      	ands	r3, r2
 800116e:	d03c      	beq.n	80011ea <HAL_RCC_OscConfig+0x2f2>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d138      	bne.n	80011ea <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e1c5      	b.n	8001508 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d019      	beq.n	80011b8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001184:	4b27      	ldr	r3, [pc, #156]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 8001186:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001188:	4b26      	ldr	r3, [pc, #152]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 800118a:	2101      	movs	r1, #1
 800118c:	430a      	orrs	r2, r1
 800118e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001190:	f7ff fb24 	bl	80007dc <HAL_GetTick>
 8001194:	0003      	movs	r3, r0
 8001196:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001198:	e008      	b.n	80011ac <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800119a:	f7ff fb1f 	bl	80007dc <HAL_GetTick>
 800119e:	0002      	movs	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e1ad      	b.n	8001508 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 80011ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011b0:	2202      	movs	r2, #2
 80011b2:	4013      	ands	r3, r2
 80011b4:	d0f1      	beq.n	800119a <HAL_RCC_OscConfig+0x2a2>
 80011b6:	e018      	b.n	80011ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80011b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 80011ba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80011bc:	4b19      	ldr	r3, [pc, #100]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 80011be:	2101      	movs	r1, #1
 80011c0:	438a      	bics	r2, r1
 80011c2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c4:	f7ff fb0a 	bl	80007dc <HAL_GetTick>
 80011c8:	0003      	movs	r3, r0
 80011ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011cc:	e008      	b.n	80011e0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011ce:	f7ff fb05 	bl	80007dc <HAL_GetTick>
 80011d2:	0002      	movs	r2, r0
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d901      	bls.n	80011e0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e193      	b.n	8001508 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011e0:	4b10      	ldr	r3, [pc, #64]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 80011e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011e4:	2202      	movs	r2, #2
 80011e6:	4013      	ands	r3, r2
 80011e8:	d1f1      	bne.n	80011ce <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2204      	movs	r2, #4
 80011f0:	4013      	ands	r3, r2
 80011f2:	d100      	bne.n	80011f6 <HAL_RCC_OscConfig+0x2fe>
 80011f4:	e0c6      	b.n	8001384 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011f6:	231f      	movs	r3, #31
 80011f8:	18fb      	adds	r3, r7, r3
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80011fe:	4b09      	ldr	r3, [pc, #36]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	2238      	movs	r2, #56	@ 0x38
 8001204:	4013      	ands	r3, r2
 8001206:	2b20      	cmp	r3, #32
 8001208:	d11e      	bne.n	8001248 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800120a:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <HAL_RCC_OscConfig+0x32c>)
 800120c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800120e:	2202      	movs	r2, #2
 8001210:	4013      	ands	r3, r2
 8001212:	d100      	bne.n	8001216 <HAL_RCC_OscConfig+0x31e>
 8001214:	e0b6      	b.n	8001384 <HAL_RCC_OscConfig+0x48c>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d000      	beq.n	8001220 <HAL_RCC_OscConfig+0x328>
 800121e:	e0b1      	b.n	8001384 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e171      	b.n	8001508 <HAL_RCC_OscConfig+0x610>
 8001224:	40021000 	.word	0x40021000
 8001228:	fffeffff 	.word	0xfffeffff
 800122c:	fffbffff 	.word	0xfffbffff
 8001230:	ffff80ff 	.word	0xffff80ff
 8001234:	ffffc7ff 	.word	0xffffc7ff
 8001238:	00f42400 	.word	0x00f42400
 800123c:	20000000 	.word	0x20000000
 8001240:	20000004 	.word	0x20000004
 8001244:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001248:	4bb1      	ldr	r3, [pc, #708]	@ (8001510 <HAL_RCC_OscConfig+0x618>)
 800124a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800124c:	2380      	movs	r3, #128	@ 0x80
 800124e:	055b      	lsls	r3, r3, #21
 8001250:	4013      	ands	r3, r2
 8001252:	d101      	bne.n	8001258 <HAL_RCC_OscConfig+0x360>
 8001254:	2301      	movs	r3, #1
 8001256:	e000      	b.n	800125a <HAL_RCC_OscConfig+0x362>
 8001258:	2300      	movs	r3, #0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d011      	beq.n	8001282 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800125e:	4bac      	ldr	r3, [pc, #688]	@ (8001510 <HAL_RCC_OscConfig+0x618>)
 8001260:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001262:	4bab      	ldr	r3, [pc, #684]	@ (8001510 <HAL_RCC_OscConfig+0x618>)
 8001264:	2180      	movs	r1, #128	@ 0x80
 8001266:	0549      	lsls	r1, r1, #21
 8001268:	430a      	orrs	r2, r1
 800126a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800126c:	4ba8      	ldr	r3, [pc, #672]	@ (8001510 <HAL_RCC_OscConfig+0x618>)
 800126e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001270:	2380      	movs	r3, #128	@ 0x80
 8001272:	055b      	lsls	r3, r3, #21
 8001274:	4013      	ands	r3, r2
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800127a:	231f      	movs	r3, #31
 800127c:	18fb      	adds	r3, r7, r3
 800127e:	2201      	movs	r2, #1
 8001280:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001282:	4ba4      	ldr	r3, [pc, #656]	@ (8001514 <HAL_RCC_OscConfig+0x61c>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	2380      	movs	r3, #128	@ 0x80
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	4013      	ands	r3, r2
 800128c:	d11a      	bne.n	80012c4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800128e:	4ba1      	ldr	r3, [pc, #644]	@ (8001514 <HAL_RCC_OscConfig+0x61c>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	4ba0      	ldr	r3, [pc, #640]	@ (8001514 <HAL_RCC_OscConfig+0x61c>)
 8001294:	2180      	movs	r1, #128	@ 0x80
 8001296:	0049      	lsls	r1, r1, #1
 8001298:	430a      	orrs	r2, r1
 800129a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800129c:	f7ff fa9e 	bl	80007dc <HAL_GetTick>
 80012a0:	0003      	movs	r3, r0
 80012a2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012a6:	f7ff fa99 	bl	80007dc <HAL_GetTick>
 80012aa:	0002      	movs	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e127      	b.n	8001508 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012b8:	4b96      	ldr	r3, [pc, #600]	@ (8001514 <HAL_RCC_OscConfig+0x61c>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	2380      	movs	r3, #128	@ 0x80
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	4013      	ands	r3, r2
 80012c2:	d0f0      	beq.n	80012a6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d106      	bne.n	80012da <HAL_RCC_OscConfig+0x3e2>
 80012cc:	4b90      	ldr	r3, [pc, #576]	@ (8001510 <HAL_RCC_OscConfig+0x618>)
 80012ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012d0:	4b8f      	ldr	r3, [pc, #572]	@ (8001510 <HAL_RCC_OscConfig+0x618>)
 80012d2:	2101      	movs	r1, #1
 80012d4:	430a      	orrs	r2, r1
 80012d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80012d8:	e01c      	b.n	8001314 <HAL_RCC_OscConfig+0x41c>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	2b05      	cmp	r3, #5
 80012e0:	d10c      	bne.n	80012fc <HAL_RCC_OscConfig+0x404>
 80012e2:	4b8b      	ldr	r3, [pc, #556]	@ (8001510 <HAL_RCC_OscConfig+0x618>)
 80012e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012e6:	4b8a      	ldr	r3, [pc, #552]	@ (8001510 <HAL_RCC_OscConfig+0x618>)
 80012e8:	2104      	movs	r1, #4
 80012ea:	430a      	orrs	r2, r1
 80012ec:	65da      	str	r2, [r3, #92]	@ 0x5c
 80012ee:	4b88      	ldr	r3, [pc, #544]	@ (8001510 <HAL_RCC_OscConfig+0x618>)
 80012f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012f2:	4b87      	ldr	r3, [pc, #540]	@ (8001510 <HAL_RCC_OscConfig+0x618>)
 80012f4:	2101      	movs	r1, #1
 80012f6:	430a      	orrs	r2, r1
 80012f8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80012fa:	e00b      	b.n	8001314 <HAL_RCC_OscConfig+0x41c>
 80012fc:	4b84      	ldr	r3, [pc, #528]	@ (8001510 <HAL_RCC_OscConfig+0x618>)
 80012fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001300:	4b83      	ldr	r3, [pc, #524]	@ (8001510 <HAL_RCC_OscConfig+0x618>)
 8001302:	2101      	movs	r1, #1
 8001304:	438a      	bics	r2, r1
 8001306:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001308:	4b81      	ldr	r3, [pc, #516]	@ (8001510 <HAL_RCC_OscConfig+0x618>)
 800130a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800130c:	4b80      	ldr	r3, [pc, #512]	@ (8001510 <HAL_RCC_OscConfig+0x618>)
 800130e:	2104      	movs	r1, #4
 8001310:	438a      	bics	r2, r1
 8001312:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d014      	beq.n	8001346 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800131c:	f7ff fa5e 	bl	80007dc <HAL_GetTick>
 8001320:	0003      	movs	r3, r0
 8001322:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001324:	e009      	b.n	800133a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001326:	f7ff fa59 	bl	80007dc <HAL_GetTick>
 800132a:	0002      	movs	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	4a79      	ldr	r2, [pc, #484]	@ (8001518 <HAL_RCC_OscConfig+0x620>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e0e6      	b.n	8001508 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800133a:	4b75      	ldr	r3, [pc, #468]	@ (8001510 <HAL_RCC_OscConfig+0x618>)
 800133c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800133e:	2202      	movs	r2, #2
 8001340:	4013      	ands	r3, r2
 8001342:	d0f0      	beq.n	8001326 <HAL_RCC_OscConfig+0x42e>
 8001344:	e013      	b.n	800136e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001346:	f7ff fa49 	bl	80007dc <HAL_GetTick>
 800134a:	0003      	movs	r3, r0
 800134c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800134e:	e009      	b.n	8001364 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001350:	f7ff fa44 	bl	80007dc <HAL_GetTick>
 8001354:	0002      	movs	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	4a6f      	ldr	r2, [pc, #444]	@ (8001518 <HAL_RCC_OscConfig+0x620>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e0d1      	b.n	8001508 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001364:	4b6a      	ldr	r3, [pc, #424]	@ (8001510 <HAL_RCC_OscConfig+0x618>)
 8001366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001368:	2202      	movs	r2, #2
 800136a:	4013      	ands	r3, r2
 800136c:	d1f0      	bne.n	8001350 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800136e:	231f      	movs	r3, #31
 8001370:	18fb      	adds	r3, r7, r3
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d105      	bne.n	8001384 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001378:	4b65      	ldr	r3, [pc, #404]	@ (8001510 <HAL_RCC_OscConfig+0x618>)
 800137a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800137c:	4b64      	ldr	r3, [pc, #400]	@ (8001510 <HAL_RCC_OscConfig+0x618>)
 800137e:	4967      	ldr	r1, [pc, #412]	@ (800151c <HAL_RCC_OscConfig+0x624>)
 8001380:	400a      	ands	r2, r1
 8001382:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69db      	ldr	r3, [r3, #28]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d100      	bne.n	800138e <HAL_RCC_OscConfig+0x496>
 800138c:	e0bb      	b.n	8001506 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800138e:	4b60      	ldr	r3, [pc, #384]	@ (8001510 <HAL_RCC_OscConfig+0x618>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2238      	movs	r2, #56	@ 0x38
 8001394:	4013      	ands	r3, r2
 8001396:	2b10      	cmp	r3, #16
 8001398:	d100      	bne.n	800139c <HAL_RCC_OscConfig+0x4a4>
 800139a:	e07b      	b.n	8001494 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69db      	ldr	r3, [r3, #28]
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d156      	bne.n	8001452 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013a4:	4b5a      	ldr	r3, [pc, #360]	@ (8001510 <HAL_RCC_OscConfig+0x618>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b59      	ldr	r3, [pc, #356]	@ (8001510 <HAL_RCC_OscConfig+0x618>)
 80013aa:	495d      	ldr	r1, [pc, #372]	@ (8001520 <HAL_RCC_OscConfig+0x628>)
 80013ac:	400a      	ands	r2, r1
 80013ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b0:	f7ff fa14 	bl	80007dc <HAL_GetTick>
 80013b4:	0003      	movs	r3, r0
 80013b6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ba:	f7ff fa0f 	bl	80007dc <HAL_GetTick>
 80013be:	0002      	movs	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e09d      	b.n	8001508 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013cc:	4b50      	ldr	r3, [pc, #320]	@ (8001510 <HAL_RCC_OscConfig+0x618>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	2380      	movs	r3, #128	@ 0x80
 80013d2:	049b      	lsls	r3, r3, #18
 80013d4:	4013      	ands	r3, r2
 80013d6:	d1f0      	bne.n	80013ba <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013d8:	4b4d      	ldr	r3, [pc, #308]	@ (8001510 <HAL_RCC_OscConfig+0x618>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	4a51      	ldr	r2, [pc, #324]	@ (8001524 <HAL_RCC_OscConfig+0x62c>)
 80013de:	4013      	ands	r3, r2
 80013e0:	0019      	movs	r1, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a1a      	ldr	r2, [r3, #32]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ea:	431a      	orrs	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013f0:	021b      	lsls	r3, r3, #8
 80013f2:	431a      	orrs	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013f8:	431a      	orrs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	431a      	orrs	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001404:	431a      	orrs	r2, r3
 8001406:	4b42      	ldr	r3, [pc, #264]	@ (8001510 <HAL_RCC_OscConfig+0x618>)
 8001408:	430a      	orrs	r2, r1
 800140a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800140c:	4b40      	ldr	r3, [pc, #256]	@ (8001510 <HAL_RCC_OscConfig+0x618>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4b3f      	ldr	r3, [pc, #252]	@ (8001510 <HAL_RCC_OscConfig+0x618>)
 8001412:	2180      	movs	r1, #128	@ 0x80
 8001414:	0449      	lsls	r1, r1, #17
 8001416:	430a      	orrs	r2, r1
 8001418:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800141a:	4b3d      	ldr	r3, [pc, #244]	@ (8001510 <HAL_RCC_OscConfig+0x618>)
 800141c:	68da      	ldr	r2, [r3, #12]
 800141e:	4b3c      	ldr	r3, [pc, #240]	@ (8001510 <HAL_RCC_OscConfig+0x618>)
 8001420:	2180      	movs	r1, #128	@ 0x80
 8001422:	0549      	lsls	r1, r1, #21
 8001424:	430a      	orrs	r2, r1
 8001426:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001428:	f7ff f9d8 	bl	80007dc <HAL_GetTick>
 800142c:	0003      	movs	r3, r0
 800142e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001432:	f7ff f9d3 	bl	80007dc <HAL_GetTick>
 8001436:	0002      	movs	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e061      	b.n	8001508 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001444:	4b32      	ldr	r3, [pc, #200]	@ (8001510 <HAL_RCC_OscConfig+0x618>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2380      	movs	r3, #128	@ 0x80
 800144a:	049b      	lsls	r3, r3, #18
 800144c:	4013      	ands	r3, r2
 800144e:	d0f0      	beq.n	8001432 <HAL_RCC_OscConfig+0x53a>
 8001450:	e059      	b.n	8001506 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001452:	4b2f      	ldr	r3, [pc, #188]	@ (8001510 <HAL_RCC_OscConfig+0x618>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	4b2e      	ldr	r3, [pc, #184]	@ (8001510 <HAL_RCC_OscConfig+0x618>)
 8001458:	4931      	ldr	r1, [pc, #196]	@ (8001520 <HAL_RCC_OscConfig+0x628>)
 800145a:	400a      	ands	r2, r1
 800145c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145e:	f7ff f9bd 	bl	80007dc <HAL_GetTick>
 8001462:	0003      	movs	r3, r0
 8001464:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001468:	f7ff f9b8 	bl	80007dc <HAL_GetTick>
 800146c:	0002      	movs	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e046      	b.n	8001508 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800147a:	4b25      	ldr	r3, [pc, #148]	@ (8001510 <HAL_RCC_OscConfig+0x618>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	2380      	movs	r3, #128	@ 0x80
 8001480:	049b      	lsls	r3, r3, #18
 8001482:	4013      	ands	r3, r2
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001486:	4b22      	ldr	r3, [pc, #136]	@ (8001510 <HAL_RCC_OscConfig+0x618>)
 8001488:	68da      	ldr	r2, [r3, #12]
 800148a:	4b21      	ldr	r3, [pc, #132]	@ (8001510 <HAL_RCC_OscConfig+0x618>)
 800148c:	4926      	ldr	r1, [pc, #152]	@ (8001528 <HAL_RCC_OscConfig+0x630>)
 800148e:	400a      	ands	r2, r1
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	e038      	b.n	8001506 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69db      	ldr	r3, [r3, #28]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d101      	bne.n	80014a0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e033      	b.n	8001508 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80014a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001510 <HAL_RCC_OscConfig+0x618>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	2203      	movs	r2, #3
 80014aa:	401a      	ands	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d126      	bne.n	8001502 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	2270      	movs	r2, #112	@ 0x70
 80014b8:	401a      	ands	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014be:	429a      	cmp	r2, r3
 80014c0:	d11f      	bne.n	8001502 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	23fe      	movs	r3, #254	@ 0xfe
 80014c6:	01db      	lsls	r3, r3, #7
 80014c8:	401a      	ands	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ce:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d116      	bne.n	8001502 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014d4:	697a      	ldr	r2, [r7, #20]
 80014d6:	23f8      	movs	r3, #248	@ 0xf8
 80014d8:	039b      	lsls	r3, r3, #14
 80014da:	401a      	ands	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d10e      	bne.n	8001502 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	23e0      	movs	r3, #224	@ 0xe0
 80014e8:	051b      	lsls	r3, r3, #20
 80014ea:	401a      	ands	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d106      	bne.n	8001502 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	0f5b      	lsrs	r3, r3, #29
 80014f8:	075a      	lsls	r2, r3, #29
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80014fe:	429a      	cmp	r2, r3
 8001500:	d001      	beq.n	8001506 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e000      	b.n	8001508 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	0018      	movs	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	b008      	add	sp, #32
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40021000 	.word	0x40021000
 8001514:	40007000 	.word	0x40007000
 8001518:	00001388 	.word	0x00001388
 800151c:	efffffff 	.word	0xefffffff
 8001520:	feffffff 	.word	0xfeffffff
 8001524:	11c1808c 	.word	0x11c1808c
 8001528:	eefefffc 	.word	0xeefefffc

0800152c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e0e9      	b.n	8001714 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001540:	4b76      	ldr	r3, [pc, #472]	@ (800171c <HAL_RCC_ClockConfig+0x1f0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2207      	movs	r2, #7
 8001546:	4013      	ands	r3, r2
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d91e      	bls.n	800158c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154e:	4b73      	ldr	r3, [pc, #460]	@ (800171c <HAL_RCC_ClockConfig+0x1f0>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2207      	movs	r2, #7
 8001554:	4393      	bics	r3, r2
 8001556:	0019      	movs	r1, r3
 8001558:	4b70      	ldr	r3, [pc, #448]	@ (800171c <HAL_RCC_ClockConfig+0x1f0>)
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	430a      	orrs	r2, r1
 800155e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001560:	f7ff f93c 	bl	80007dc <HAL_GetTick>
 8001564:	0003      	movs	r3, r0
 8001566:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001568:	e009      	b.n	800157e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800156a:	f7ff f937 	bl	80007dc <HAL_GetTick>
 800156e:	0002      	movs	r2, r0
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	4a6a      	ldr	r2, [pc, #424]	@ (8001720 <HAL_RCC_ClockConfig+0x1f4>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d901      	bls.n	800157e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e0ca      	b.n	8001714 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800157e:	4b67      	ldr	r3, [pc, #412]	@ (800171c <HAL_RCC_ClockConfig+0x1f0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2207      	movs	r2, #7
 8001584:	4013      	ands	r3, r2
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	d1ee      	bne.n	800156a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2202      	movs	r2, #2
 8001592:	4013      	ands	r3, r2
 8001594:	d015      	beq.n	80015c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2204      	movs	r2, #4
 800159c:	4013      	ands	r3, r2
 800159e:	d006      	beq.n	80015ae <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80015a0:	4b60      	ldr	r3, [pc, #384]	@ (8001724 <HAL_RCC_ClockConfig+0x1f8>)
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	4b5f      	ldr	r3, [pc, #380]	@ (8001724 <HAL_RCC_ClockConfig+0x1f8>)
 80015a6:	21e0      	movs	r1, #224	@ 0xe0
 80015a8:	01c9      	lsls	r1, r1, #7
 80015aa:	430a      	orrs	r2, r1
 80015ac:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001724 <HAL_RCC_ClockConfig+0x1f8>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	4a5d      	ldr	r2, [pc, #372]	@ (8001728 <HAL_RCC_ClockConfig+0x1fc>)
 80015b4:	4013      	ands	r3, r2
 80015b6:	0019      	movs	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	4b59      	ldr	r3, [pc, #356]	@ (8001724 <HAL_RCC_ClockConfig+0x1f8>)
 80015be:	430a      	orrs	r2, r1
 80015c0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2201      	movs	r2, #1
 80015c8:	4013      	ands	r3, r2
 80015ca:	d057      	beq.n	800167c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d107      	bne.n	80015e4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015d4:	4b53      	ldr	r3, [pc, #332]	@ (8001724 <HAL_RCC_ClockConfig+0x1f8>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	2380      	movs	r3, #128	@ 0x80
 80015da:	029b      	lsls	r3, r3, #10
 80015dc:	4013      	ands	r3, r2
 80015de:	d12b      	bne.n	8001638 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e097      	b.n	8001714 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d107      	bne.n	80015fc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015ec:	4b4d      	ldr	r3, [pc, #308]	@ (8001724 <HAL_RCC_ClockConfig+0x1f8>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	2380      	movs	r3, #128	@ 0x80
 80015f2:	049b      	lsls	r3, r3, #18
 80015f4:	4013      	ands	r3, r2
 80015f6:	d11f      	bne.n	8001638 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e08b      	b.n	8001714 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d107      	bne.n	8001614 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001604:	4b47      	ldr	r3, [pc, #284]	@ (8001724 <HAL_RCC_ClockConfig+0x1f8>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	2380      	movs	r3, #128	@ 0x80
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	4013      	ands	r3, r2
 800160e:	d113      	bne.n	8001638 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e07f      	b.n	8001714 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b03      	cmp	r3, #3
 800161a:	d106      	bne.n	800162a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800161c:	4b41      	ldr	r3, [pc, #260]	@ (8001724 <HAL_RCC_ClockConfig+0x1f8>)
 800161e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001620:	2202      	movs	r2, #2
 8001622:	4013      	ands	r3, r2
 8001624:	d108      	bne.n	8001638 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e074      	b.n	8001714 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800162a:	4b3e      	ldr	r3, [pc, #248]	@ (8001724 <HAL_RCC_ClockConfig+0x1f8>)
 800162c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800162e:	2202      	movs	r2, #2
 8001630:	4013      	ands	r3, r2
 8001632:	d101      	bne.n	8001638 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e06d      	b.n	8001714 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001638:	4b3a      	ldr	r3, [pc, #232]	@ (8001724 <HAL_RCC_ClockConfig+0x1f8>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	2207      	movs	r2, #7
 800163e:	4393      	bics	r3, r2
 8001640:	0019      	movs	r1, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	4b37      	ldr	r3, [pc, #220]	@ (8001724 <HAL_RCC_ClockConfig+0x1f8>)
 8001648:	430a      	orrs	r2, r1
 800164a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800164c:	f7ff f8c6 	bl	80007dc <HAL_GetTick>
 8001650:	0003      	movs	r3, r0
 8001652:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001654:	e009      	b.n	800166a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001656:	f7ff f8c1 	bl	80007dc <HAL_GetTick>
 800165a:	0002      	movs	r2, r0
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	4a2f      	ldr	r2, [pc, #188]	@ (8001720 <HAL_RCC_ClockConfig+0x1f4>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d901      	bls.n	800166a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e054      	b.n	8001714 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166a:	4b2e      	ldr	r3, [pc, #184]	@ (8001724 <HAL_RCC_ClockConfig+0x1f8>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	2238      	movs	r2, #56	@ 0x38
 8001670:	401a      	ands	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	429a      	cmp	r2, r3
 800167a:	d1ec      	bne.n	8001656 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800167c:	4b27      	ldr	r3, [pc, #156]	@ (800171c <HAL_RCC_ClockConfig+0x1f0>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2207      	movs	r2, #7
 8001682:	4013      	ands	r3, r2
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d21e      	bcs.n	80016c8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168a:	4b24      	ldr	r3, [pc, #144]	@ (800171c <HAL_RCC_ClockConfig+0x1f0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2207      	movs	r2, #7
 8001690:	4393      	bics	r3, r2
 8001692:	0019      	movs	r1, r3
 8001694:	4b21      	ldr	r3, [pc, #132]	@ (800171c <HAL_RCC_ClockConfig+0x1f0>)
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	430a      	orrs	r2, r1
 800169a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800169c:	f7ff f89e 	bl	80007dc <HAL_GetTick>
 80016a0:	0003      	movs	r3, r0
 80016a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016a4:	e009      	b.n	80016ba <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a6:	f7ff f899 	bl	80007dc <HAL_GetTick>
 80016aa:	0002      	movs	r2, r0
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001720 <HAL_RCC_ClockConfig+0x1f4>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e02c      	b.n	8001714 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016ba:	4b18      	ldr	r3, [pc, #96]	@ (800171c <HAL_RCC_ClockConfig+0x1f0>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2207      	movs	r2, #7
 80016c0:	4013      	ands	r3, r2
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d1ee      	bne.n	80016a6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2204      	movs	r2, #4
 80016ce:	4013      	ands	r3, r2
 80016d0:	d009      	beq.n	80016e6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80016d2:	4b14      	ldr	r3, [pc, #80]	@ (8001724 <HAL_RCC_ClockConfig+0x1f8>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	4a15      	ldr	r2, [pc, #84]	@ (800172c <HAL_RCC_ClockConfig+0x200>)
 80016d8:	4013      	ands	r3, r2
 80016da:	0019      	movs	r1, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68da      	ldr	r2, [r3, #12]
 80016e0:	4b10      	ldr	r3, [pc, #64]	@ (8001724 <HAL_RCC_ClockConfig+0x1f8>)
 80016e2:	430a      	orrs	r2, r1
 80016e4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80016e6:	f000 f829 	bl	800173c <HAL_RCC_GetSysClockFreq>
 80016ea:	0001      	movs	r1, r0
 80016ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001724 <HAL_RCC_ClockConfig+0x1f8>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	0a1b      	lsrs	r3, r3, #8
 80016f2:	220f      	movs	r2, #15
 80016f4:	401a      	ands	r2, r3
 80016f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001730 <HAL_RCC_ClockConfig+0x204>)
 80016f8:	0092      	lsls	r2, r2, #2
 80016fa:	58d3      	ldr	r3, [r2, r3]
 80016fc:	221f      	movs	r2, #31
 80016fe:	4013      	ands	r3, r2
 8001700:	000a      	movs	r2, r1
 8001702:	40da      	lsrs	r2, r3
 8001704:	4b0b      	ldr	r3, [pc, #44]	@ (8001734 <HAL_RCC_ClockConfig+0x208>)
 8001706:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001708:	4b0b      	ldr	r3, [pc, #44]	@ (8001738 <HAL_RCC_ClockConfig+0x20c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	0018      	movs	r0, r3
 800170e:	f7ff f809 	bl	8000724 <HAL_InitTick>
 8001712:	0003      	movs	r3, r0
}
 8001714:	0018      	movs	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	b004      	add	sp, #16
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40022000 	.word	0x40022000
 8001720:	00001388 	.word	0x00001388
 8001724:	40021000 	.word	0x40021000
 8001728:	fffff0ff 	.word	0xfffff0ff
 800172c:	ffff8fff 	.word	0xffff8fff
 8001730:	08001dec 	.word	0x08001dec
 8001734:	20000000 	.word	0x20000000
 8001738:	20000004 	.word	0x20000004

0800173c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001742:	4b3c      	ldr	r3, [pc, #240]	@ (8001834 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2238      	movs	r2, #56	@ 0x38
 8001748:	4013      	ands	r3, r2
 800174a:	d10f      	bne.n	800176c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800174c:	4b39      	ldr	r3, [pc, #228]	@ (8001834 <HAL_RCC_GetSysClockFreq+0xf8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	0adb      	lsrs	r3, r3, #11
 8001752:	2207      	movs	r2, #7
 8001754:	4013      	ands	r3, r2
 8001756:	2201      	movs	r2, #1
 8001758:	409a      	lsls	r2, r3
 800175a:	0013      	movs	r3, r2
 800175c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800175e:	6839      	ldr	r1, [r7, #0]
 8001760:	4835      	ldr	r0, [pc, #212]	@ (8001838 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001762:	f7fe fccf 	bl	8000104 <__udivsi3>
 8001766:	0003      	movs	r3, r0
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	e05d      	b.n	8001828 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800176c:	4b31      	ldr	r3, [pc, #196]	@ (8001834 <HAL_RCC_GetSysClockFreq+0xf8>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	2238      	movs	r2, #56	@ 0x38
 8001772:	4013      	ands	r3, r2
 8001774:	2b08      	cmp	r3, #8
 8001776:	d102      	bne.n	800177e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001778:	4b30      	ldr	r3, [pc, #192]	@ (800183c <HAL_RCC_GetSysClockFreq+0x100>)
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	e054      	b.n	8001828 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800177e:	4b2d      	ldr	r3, [pc, #180]	@ (8001834 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	2238      	movs	r2, #56	@ 0x38
 8001784:	4013      	ands	r3, r2
 8001786:	2b10      	cmp	r3, #16
 8001788:	d138      	bne.n	80017fc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800178a:	4b2a      	ldr	r3, [pc, #168]	@ (8001834 <HAL_RCC_GetSysClockFreq+0xf8>)
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	2203      	movs	r2, #3
 8001790:	4013      	ands	r3, r2
 8001792:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001794:	4b27      	ldr	r3, [pc, #156]	@ (8001834 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	091b      	lsrs	r3, r3, #4
 800179a:	2207      	movs	r2, #7
 800179c:	4013      	ands	r3, r2
 800179e:	3301      	adds	r3, #1
 80017a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d10d      	bne.n	80017c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017a8:	68b9      	ldr	r1, [r7, #8]
 80017aa:	4824      	ldr	r0, [pc, #144]	@ (800183c <HAL_RCC_GetSysClockFreq+0x100>)
 80017ac:	f7fe fcaa 	bl	8000104 <__udivsi3>
 80017b0:	0003      	movs	r3, r0
 80017b2:	0019      	movs	r1, r3
 80017b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001834 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	0a1b      	lsrs	r3, r3, #8
 80017ba:	227f      	movs	r2, #127	@ 0x7f
 80017bc:	4013      	ands	r3, r2
 80017be:	434b      	muls	r3, r1
 80017c0:	617b      	str	r3, [r7, #20]
        break;
 80017c2:	e00d      	b.n	80017e0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80017c4:	68b9      	ldr	r1, [r7, #8]
 80017c6:	481c      	ldr	r0, [pc, #112]	@ (8001838 <HAL_RCC_GetSysClockFreq+0xfc>)
 80017c8:	f7fe fc9c 	bl	8000104 <__udivsi3>
 80017cc:	0003      	movs	r3, r0
 80017ce:	0019      	movs	r1, r3
 80017d0:	4b18      	ldr	r3, [pc, #96]	@ (8001834 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	0a1b      	lsrs	r3, r3, #8
 80017d6:	227f      	movs	r2, #127	@ 0x7f
 80017d8:	4013      	ands	r3, r2
 80017da:	434b      	muls	r3, r1
 80017dc:	617b      	str	r3, [r7, #20]
        break;
 80017de:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80017e0:	4b14      	ldr	r3, [pc, #80]	@ (8001834 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	0f5b      	lsrs	r3, r3, #29
 80017e6:	2207      	movs	r2, #7
 80017e8:	4013      	ands	r3, r2
 80017ea:	3301      	adds	r3, #1
 80017ec:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	6978      	ldr	r0, [r7, #20]
 80017f2:	f7fe fc87 	bl	8000104 <__udivsi3>
 80017f6:	0003      	movs	r3, r0
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	e015      	b.n	8001828 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80017fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001834 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	2238      	movs	r2, #56	@ 0x38
 8001802:	4013      	ands	r3, r2
 8001804:	2b20      	cmp	r3, #32
 8001806:	d103      	bne.n	8001810 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001808:	2380      	movs	r3, #128	@ 0x80
 800180a:	021b      	lsls	r3, r3, #8
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	e00b      	b.n	8001828 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001810:	4b08      	ldr	r3, [pc, #32]	@ (8001834 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2238      	movs	r2, #56	@ 0x38
 8001816:	4013      	ands	r3, r2
 8001818:	2b18      	cmp	r3, #24
 800181a:	d103      	bne.n	8001824 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800181c:	23fa      	movs	r3, #250	@ 0xfa
 800181e:	01db      	lsls	r3, r3, #7
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	e001      	b.n	8001828 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001824:	2300      	movs	r3, #0
 8001826:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001828:	693b      	ldr	r3, [r7, #16]
}
 800182a:	0018      	movs	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	b006      	add	sp, #24
 8001830:	bd80      	pop	{r7, pc}
 8001832:	46c0      	nop			@ (mov r8, r8)
 8001834:	40021000 	.word	0x40021000
 8001838:	00f42400 	.word	0x00f42400
 800183c:	007a1200 	.word	0x007a1200

08001840 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e04a      	b.n	80018e8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	223d      	movs	r2, #61	@ 0x3d
 8001856:	5c9b      	ldrb	r3, [r3, r2]
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d107      	bne.n	800186e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	223c      	movs	r2, #60	@ 0x3c
 8001862:	2100      	movs	r1, #0
 8001864:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	0018      	movs	r0, r3
 800186a:	f7fe feb5 	bl	80005d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	223d      	movs	r2, #61	@ 0x3d
 8001872:	2102      	movs	r1, #2
 8001874:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3304      	adds	r3, #4
 800187e:	0019      	movs	r1, r3
 8001880:	0010      	movs	r0, r2
 8001882:	f000 f9df 	bl	8001c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2248      	movs	r2, #72	@ 0x48
 800188a:	2101      	movs	r1, #1
 800188c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	223e      	movs	r2, #62	@ 0x3e
 8001892:	2101      	movs	r1, #1
 8001894:	5499      	strb	r1, [r3, r2]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	223f      	movs	r2, #63	@ 0x3f
 800189a:	2101      	movs	r1, #1
 800189c:	5499      	strb	r1, [r3, r2]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2240      	movs	r2, #64	@ 0x40
 80018a2:	2101      	movs	r1, #1
 80018a4:	5499      	strb	r1, [r3, r2]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2241      	movs	r2, #65	@ 0x41
 80018aa:	2101      	movs	r1, #1
 80018ac:	5499      	strb	r1, [r3, r2]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2242      	movs	r2, #66	@ 0x42
 80018b2:	2101      	movs	r1, #1
 80018b4:	5499      	strb	r1, [r3, r2]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2243      	movs	r2, #67	@ 0x43
 80018ba:	2101      	movs	r1, #1
 80018bc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2244      	movs	r2, #68	@ 0x44
 80018c2:	2101      	movs	r1, #1
 80018c4:	5499      	strb	r1, [r3, r2]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2245      	movs	r2, #69	@ 0x45
 80018ca:	2101      	movs	r1, #1
 80018cc:	5499      	strb	r1, [r3, r2]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2246      	movs	r2, #70	@ 0x46
 80018d2:	2101      	movs	r1, #1
 80018d4:	5499      	strb	r1, [r3, r2]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2247      	movs	r2, #71	@ 0x47
 80018da:	2101      	movs	r1, #1
 80018dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	223d      	movs	r2, #61	@ 0x3d
 80018e2:	2101      	movs	r1, #1
 80018e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	0018      	movs	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	b002      	add	sp, #8
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	223d      	movs	r2, #61	@ 0x3d
 80018fc:	5c9b      	ldrb	r3, [r3, r2]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b01      	cmp	r3, #1
 8001902:	d001      	beq.n	8001908 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e03d      	b.n	8001984 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	223d      	movs	r2, #61	@ 0x3d
 800190c:	2102      	movs	r1, #2
 800190e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68da      	ldr	r2, [r3, #12]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2101      	movs	r1, #1
 800191c:	430a      	orrs	r2, r1
 800191e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a19      	ldr	r2, [pc, #100]	@ (800198c <HAL_TIM_Base_Start_IT+0x9c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d00a      	beq.n	8001940 <HAL_TIM_Base_Start_IT+0x50>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	2380      	movs	r3, #128	@ 0x80
 8001930:	05db      	lsls	r3, r3, #23
 8001932:	429a      	cmp	r2, r3
 8001934:	d004      	beq.n	8001940 <HAL_TIM_Base_Start_IT+0x50>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a15      	ldr	r2, [pc, #84]	@ (8001990 <HAL_TIM_Base_Start_IT+0xa0>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d116      	bne.n	800196e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	4a13      	ldr	r2, [pc, #76]	@ (8001994 <HAL_TIM_Base_Start_IT+0xa4>)
 8001948:	4013      	ands	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2b06      	cmp	r3, #6
 8001950:	d016      	beq.n	8001980 <HAL_TIM_Base_Start_IT+0x90>
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	2380      	movs	r3, #128	@ 0x80
 8001956:	025b      	lsls	r3, r3, #9
 8001958:	429a      	cmp	r2, r3
 800195a:	d011      	beq.n	8001980 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2101      	movs	r1, #1
 8001968:	430a      	orrs	r2, r1
 800196a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800196c:	e008      	b.n	8001980 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2101      	movs	r1, #1
 800197a:	430a      	orrs	r2, r1
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	e000      	b.n	8001982 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001980:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	0018      	movs	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	b004      	add	sp, #16
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40012c00 	.word	0x40012c00
 8001990:	40000400 	.word	0x40000400
 8001994:	00010007 	.word	0x00010007

08001998 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	68da      	ldr	r2, [r3, #12]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2101      	movs	r1, #1
 80019ac:	438a      	bics	r2, r1
 80019ae:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	4a0d      	ldr	r2, [pc, #52]	@ (80019ec <HAL_TIM_Base_Stop_IT+0x54>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	d10d      	bne.n	80019d8 <HAL_TIM_Base_Stop_IT+0x40>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	4a0b      	ldr	r2, [pc, #44]	@ (80019f0 <HAL_TIM_Base_Stop_IT+0x58>)
 80019c4:	4013      	ands	r3, r2
 80019c6:	d107      	bne.n	80019d8 <HAL_TIM_Base_Stop_IT+0x40>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2101      	movs	r1, #1
 80019d4:	438a      	bics	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	223d      	movs	r2, #61	@ 0x3d
 80019dc:	2101      	movs	r1, #1
 80019de:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	0018      	movs	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	b002      	add	sp, #8
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	46c0      	nop			@ (mov r8, r8)
 80019ec:	00001111 	.word	0x00001111
 80019f0:	00000444 	.word	0x00000444

080019f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	2202      	movs	r2, #2
 8001a10:	4013      	ands	r3, r2
 8001a12:	d021      	beq.n	8001a58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2202      	movs	r2, #2
 8001a18:	4013      	ands	r3, r2
 8001a1a:	d01d      	beq.n	8001a58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2203      	movs	r2, #3
 8001a22:	4252      	negs	r2, r2
 8001a24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	2203      	movs	r2, #3
 8001a34:	4013      	ands	r3, r2
 8001a36:	d004      	beq.n	8001a42 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	f000 f8ea 	bl	8001c14 <HAL_TIM_IC_CaptureCallback>
 8001a40:	e007      	b.n	8001a52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	0018      	movs	r0, r3
 8001a46:	f000 f8dd 	bl	8001c04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f000 f8e9 	bl	8001c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	2204      	movs	r2, #4
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	d022      	beq.n	8001aa6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2204      	movs	r2, #4
 8001a64:	4013      	ands	r3, r2
 8001a66:	d01e      	beq.n	8001aa6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2205      	movs	r2, #5
 8001a6e:	4252      	negs	r2, r2
 8001a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2202      	movs	r2, #2
 8001a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	699a      	ldr	r2, [r3, #24]
 8001a7e:	23c0      	movs	r3, #192	@ 0xc0
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4013      	ands	r3, r2
 8001a84:	d004      	beq.n	8001a90 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f000 f8c3 	bl	8001c14 <HAL_TIM_IC_CaptureCallback>
 8001a8e:	e007      	b.n	8001aa0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	0018      	movs	r0, r3
 8001a94:	f000 f8b6 	bl	8001c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f000 f8c2 	bl	8001c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	2208      	movs	r2, #8
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d021      	beq.n	8001af2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2208      	movs	r2, #8
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d01d      	beq.n	8001af2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2209      	movs	r2, #9
 8001abc:	4252      	negs	r2, r2
 8001abe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2204      	movs	r2, #4
 8001ac4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	2203      	movs	r2, #3
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d004      	beq.n	8001adc <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f000 f89d 	bl	8001c14 <HAL_TIM_IC_CaptureCallback>
 8001ada:	e007      	b.n	8001aec <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	0018      	movs	r0, r3
 8001ae0:	f000 f890 	bl	8001c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	f000 f89c 	bl	8001c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	2210      	movs	r2, #16
 8001af6:	4013      	ands	r3, r2
 8001af8:	d022      	beq.n	8001b40 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2210      	movs	r2, #16
 8001afe:	4013      	ands	r3, r2
 8001b00:	d01e      	beq.n	8001b40 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2211      	movs	r2, #17
 8001b08:	4252      	negs	r2, r2
 8001b0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2208      	movs	r2, #8
 8001b10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	69da      	ldr	r2, [r3, #28]
 8001b18:	23c0      	movs	r3, #192	@ 0xc0
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d004      	beq.n	8001b2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	0018      	movs	r0, r3
 8001b24:	f000 f876 	bl	8001c14 <HAL_TIM_IC_CaptureCallback>
 8001b28:	e007      	b.n	8001b3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f000 f869 	bl	8001c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	0018      	movs	r0, r3
 8001b36:	f000 f875 	bl	8001c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	2201      	movs	r2, #1
 8001b44:	4013      	ands	r3, r2
 8001b46:	d00c      	beq.n	8001b62 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d008      	beq.n	8001b62 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2202      	movs	r2, #2
 8001b56:	4252      	negs	r2, r2
 8001b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	f7fe fce7 	bl	8000530 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	2280      	movs	r2, #128	@ 0x80
 8001b66:	4013      	ands	r3, r2
 8001b68:	d104      	bne.n	8001b74 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001b6a:	68ba      	ldr	r2, [r7, #8]
 8001b6c:	2380      	movs	r3, #128	@ 0x80
 8001b6e:	019b      	lsls	r3, r3, #6
 8001b70:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001b72:	d00b      	beq.n	8001b8c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2280      	movs	r2, #128	@ 0x80
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d007      	beq.n	8001b8c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a1e      	ldr	r2, [pc, #120]	@ (8001bfc <HAL_TIM_IRQHandler+0x208>)
 8001b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	0018      	movs	r0, r3
 8001b88:	f000 f8e8 	bl	8001d5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	2380      	movs	r3, #128	@ 0x80
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4013      	ands	r3, r2
 8001b94:	d00b      	beq.n	8001bae <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2280      	movs	r2, #128	@ 0x80
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d007      	beq.n	8001bae <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a17      	ldr	r2, [pc, #92]	@ (8001c00 <HAL_TIM_IRQHandler+0x20c>)
 8001ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f000 f8df 	bl	8001d6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	2240      	movs	r2, #64	@ 0x40
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d00c      	beq.n	8001bd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2240      	movs	r2, #64	@ 0x40
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d008      	beq.n	8001bd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2241      	movs	r2, #65	@ 0x41
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	0018      	movs	r0, r3
 8001bcc:	f000 f832 	bl	8001c34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d00c      	beq.n	8001bf2 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2220      	movs	r2, #32
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d008      	beq.n	8001bf2 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2221      	movs	r2, #33	@ 0x21
 8001be6:	4252      	negs	r2, r2
 8001be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	0018      	movs	r0, r3
 8001bee:	f000 f8ad 	bl	8001d4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001bf2:	46c0      	nop			@ (mov r8, r8)
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	b004      	add	sp, #16
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	46c0      	nop			@ (mov r8, r8)
 8001bfc:	ffffdf7f 	.word	0xffffdf7f
 8001c00:	fffffeff 	.word	0xfffffeff

08001c04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c0c:	46c0      	nop			@ (mov r8, r8)
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	b002      	add	sp, #8
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c1c:	46c0      	nop			@ (mov r8, r8)
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	b002      	add	sp, #8
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c2c:	46c0      	nop			@ (mov r8, r8)
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	b002      	add	sp, #8
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c3c:	46c0      	nop			@ (mov r8, r8)
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	b002      	add	sp, #8
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a37      	ldr	r2, [pc, #220]	@ (8001d34 <TIM_Base_SetConfig+0xf0>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d008      	beq.n	8001c6e <TIM_Base_SetConfig+0x2a>
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	2380      	movs	r3, #128	@ 0x80
 8001c60:	05db      	lsls	r3, r3, #23
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d003      	beq.n	8001c6e <TIM_Base_SetConfig+0x2a>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a33      	ldr	r2, [pc, #204]	@ (8001d38 <TIM_Base_SetConfig+0xf4>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d108      	bne.n	8001c80 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2270      	movs	r2, #112	@ 0x70
 8001c72:	4393      	bics	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a2c      	ldr	r2, [pc, #176]	@ (8001d34 <TIM_Base_SetConfig+0xf0>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d014      	beq.n	8001cb2 <TIM_Base_SetConfig+0x6e>
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	2380      	movs	r3, #128	@ 0x80
 8001c8c:	05db      	lsls	r3, r3, #23
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d00f      	beq.n	8001cb2 <TIM_Base_SetConfig+0x6e>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a28      	ldr	r2, [pc, #160]	@ (8001d38 <TIM_Base_SetConfig+0xf4>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d00b      	beq.n	8001cb2 <TIM_Base_SetConfig+0x6e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a27      	ldr	r2, [pc, #156]	@ (8001d3c <TIM_Base_SetConfig+0xf8>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d007      	beq.n	8001cb2 <TIM_Base_SetConfig+0x6e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a26      	ldr	r2, [pc, #152]	@ (8001d40 <TIM_Base_SetConfig+0xfc>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d003      	beq.n	8001cb2 <TIM_Base_SetConfig+0x6e>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a25      	ldr	r2, [pc, #148]	@ (8001d44 <TIM_Base_SetConfig+0x100>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d108      	bne.n	8001cc4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4a24      	ldr	r2, [pc, #144]	@ (8001d48 <TIM_Base_SetConfig+0x104>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2280      	movs	r2, #128	@ 0x80
 8001cc8:	4393      	bics	r3, r2
 8001cca:	001a      	movs	r2, r3
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a11      	ldr	r2, [pc, #68]	@ (8001d34 <TIM_Base_SetConfig+0xf0>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d007      	beq.n	8001d02 <TIM_Base_SetConfig+0xbe>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a12      	ldr	r2, [pc, #72]	@ (8001d40 <TIM_Base_SetConfig+0xfc>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d003      	beq.n	8001d02 <TIM_Base_SetConfig+0xbe>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a11      	ldr	r2, [pc, #68]	@ (8001d44 <TIM_Base_SetConfig+0x100>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d103      	bne.n	8001d0a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	691a      	ldr	r2, [r3, #16]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	2201      	movs	r2, #1
 8001d16:	4013      	ands	r3, r2
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d106      	bne.n	8001d2a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	2201      	movs	r2, #1
 8001d22:	4393      	bics	r3, r2
 8001d24:	001a      	movs	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	611a      	str	r2, [r3, #16]
  }
}
 8001d2a:	46c0      	nop			@ (mov r8, r8)
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	b004      	add	sp, #16
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	46c0      	nop			@ (mov r8, r8)
 8001d34:	40012c00 	.word	0x40012c00
 8001d38:	40000400 	.word	0x40000400
 8001d3c:	40002000 	.word	0x40002000
 8001d40:	40014400 	.word	0x40014400
 8001d44:	40014800 	.word	0x40014800
 8001d48:	fffffcff 	.word	0xfffffcff

08001d4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d54:	46c0      	nop			@ (mov r8, r8)
 8001d56:	46bd      	mov	sp, r7
 8001d58:	b002      	add	sp, #8
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d64:	46c0      	nop			@ (mov r8, r8)
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b002      	add	sp, #8
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001d74:	46c0      	nop			@ (mov r8, r8)
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b002      	add	sp, #8
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <memset>:
 8001d7c:	0003      	movs	r3, r0
 8001d7e:	1882      	adds	r2, r0, r2
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d100      	bne.n	8001d86 <memset+0xa>
 8001d84:	4770      	bx	lr
 8001d86:	7019      	strb	r1, [r3, #0]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	e7f9      	b.n	8001d80 <memset+0x4>

08001d8c <__libc_init_array>:
 8001d8c:	b570      	push	{r4, r5, r6, lr}
 8001d8e:	2600      	movs	r6, #0
 8001d90:	4c0c      	ldr	r4, [pc, #48]	@ (8001dc4 <__libc_init_array+0x38>)
 8001d92:	4d0d      	ldr	r5, [pc, #52]	@ (8001dc8 <__libc_init_array+0x3c>)
 8001d94:	1b64      	subs	r4, r4, r5
 8001d96:	10a4      	asrs	r4, r4, #2
 8001d98:	42a6      	cmp	r6, r4
 8001d9a:	d109      	bne.n	8001db0 <__libc_init_array+0x24>
 8001d9c:	2600      	movs	r6, #0
 8001d9e:	f000 f819 	bl	8001dd4 <_init>
 8001da2:	4c0a      	ldr	r4, [pc, #40]	@ (8001dcc <__libc_init_array+0x40>)
 8001da4:	4d0a      	ldr	r5, [pc, #40]	@ (8001dd0 <__libc_init_array+0x44>)
 8001da6:	1b64      	subs	r4, r4, r5
 8001da8:	10a4      	asrs	r4, r4, #2
 8001daa:	42a6      	cmp	r6, r4
 8001dac:	d105      	bne.n	8001dba <__libc_init_array+0x2e>
 8001dae:	bd70      	pop	{r4, r5, r6, pc}
 8001db0:	00b3      	lsls	r3, r6, #2
 8001db2:	58eb      	ldr	r3, [r5, r3]
 8001db4:	4798      	blx	r3
 8001db6:	3601      	adds	r6, #1
 8001db8:	e7ee      	b.n	8001d98 <__libc_init_array+0xc>
 8001dba:	00b3      	lsls	r3, r6, #2
 8001dbc:	58eb      	ldr	r3, [r5, r3]
 8001dbe:	4798      	blx	r3
 8001dc0:	3601      	adds	r6, #1
 8001dc2:	e7f2      	b.n	8001daa <__libc_init_array+0x1e>
 8001dc4:	08001e2c 	.word	0x08001e2c
 8001dc8:	08001e2c 	.word	0x08001e2c
 8001dcc:	08001e30 	.word	0x08001e30
 8001dd0:	08001e2c 	.word	0x08001e2c

08001dd4 <_init>:
 8001dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dd6:	46c0      	nop			@ (mov r8, r8)
 8001dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dda:	bc08      	pop	{r3}
 8001ddc:	469e      	mov	lr, r3
 8001dde:	4770      	bx	lr

08001de0 <_fini>:
 8001de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001de2:	46c0      	nop			@ (mov r8, r8)
 8001de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001de6:	bc08      	pop	{r3}
 8001de8:	469e      	mov	lr, r3
 8001dea:	4770      	bx	lr
